{
  "area": [
    {
      "input": "10 20",
      "output": "200"
    }
  ],
  "m2s": [
    {
      "input": "2",
      "output": "2 minutes is 120 seconds."
    }
  ],
  "op": [
    {
      "input": "5+3=8",
      "output": "5-3=2\n5*3=15\n5/3=1\n5%3=2"
    }
  ],
  "triangle": [
    {
      "input": "9 83",
      "output": "373.50"
    }
  ],
  "average": [
    {
      "input": "7 7 7 7\n2 5 9 5",
      "output": "7.00\n5.25"
    }
  ],
  "change": [
    {
      "input": "530",
      "output": "4 1 2"
    }
  ],
  "sec(open)": [
    {
      "input": "70",
      "output": "0 0 1 10"
    }
  ],
  "three": [
    {
      "input": "472…… (1)",
      "output": "×385…… (2)\n---------------\n2360…… (3)\n3776 …… (4)\n1416  …… (5)\n--------------\n181720…… (6)"
    }
  ],
  "koi_watch": [
    {
      "input": "14 30 0\n200\n17 40 45\n6015\n23 48 59\n2515",
      "output": "14 33 20\n19 21 0\n0 30 54"
    }
  ],
  "empty_bottle": [
    {
      "input": "32\n45",
      "output": "42 0\n58 4"
    }
  ],
  "business": [
    {
      "input": "40 70 100 30\n40 70 50 20\n14604 32391 3902 153",
      "output": "70\n20\n-13885"
    }
  ],
  "fuse(open)": [
    {
      "input": "10 2 1\n5 4 0",
      "output": "60 amperes\n50 amperes"
    }
  ],
  "paintblock": [
    {
      "input": "3 3 3",
      "output": "12"
    }
  ],
  "coci_faktor": [
    {
      "input": "Total sum of all citations articles published in the journal recived",
      "output": "--------------------------------------------------------------------\nTotal number of articles published"
    }
  ],
  "coci_slatkisi": [
    {
      "input": "184 1\n182 2",
      "output": "180\n10^1 = 10 이 최소로 가진 단위이니 180 190 중 180 이 가까워서 답은 180\n200\n10^2= 100 이 최소로 가진 단위이니 100 과 200 중 200 이 가까워서  200"
    }
  ],
  "butter": [
    {
      "input": "3 3",
      "output": "3"
    }
  ],
  "slant": [
    {
      "input": "300 1000\n400 1300",
      "output": "3 100"
    }
  ],
  "maxandmin": [
    {
      "input": "4 3",
      "output": "4"
    }
  ],
  "angle(open)": [
    {
      "input": "3",
      "output": "180 360"
    }
  ],
  "spot(special judge)": [
    {
      "input": "28.5\n-25.0\n28.5\n50.0",
      "output": "7.125\n-14.250"
    }
  ],
  "rpoly(open)": [
    {
      "input": "2 2000\n10 3000",
      "output": "12.566\n314.159"
    }
  ],
  "x_length": [
    {
      "input": "4 3",
      "output": "31.891"
    }
  ],
  "complete_graph": [
    {
      "input": "4",
      "output": "6"
    }
  ],
  "coci_intersect": [
    {
      "input": "3\n4\n6",
      "output": "0\n1\n15"
    }
  ],
  "even(open)": [
    {
      "input": "3 17",
      "output": "12"
    }
  ],
  "flr": [
    {
      "input": "100",
      "output": "7"
    }
  ],
  "joana": [
    {
      "input": "1",
      "output": "3  5  7\n9 11 13 15 17\n19 21 23 25 27 29 31\n..."
    }
  ],
  "bumblebee": [
    {
      "input": "2 3 6 10\n3 4 9 10",
      "output": "12.0000000\n12.857143"
    }
  ],
  "nuclear": [
    {
      "input": "2 8",
      "output": "700"
    }
  ],
  "toilet": [
    {
      "input": "5",
      "output": "3 2"
    }
  ],
  "eboxes(open)": [
    {
      "input": "11 8 2 102",
      "output": "115"
    }
  ],
  "nsubset(open)": [
    {
      "input": "갑   을",
      "output": "-------\nb    b\nb    y\ny    b\ny    y"
    }
  ],
  "boi_squint": [
    {
      "input": "122333444455555",
      "output": "11060446"
    }
  ],
  "d_f(open)": [
    {
      "input": "1.58\n-1.58",
      "output": "1 0.58\n-2 0.42"
    }
  ],
  "tiles(open)": [
    {
      "input": "160 240\n100 120",
      "output": "The number of whole tiles is 600 part tiles is 0\nThe number of whole tiles is 180 part tiles is 15"
    }
  ],
  "compare": [
    {
      "input": "3 4\n4 4",
      "output": "<\n="
    }
  ],
  "comparefrac": [
    {
      "input": "3 4 5 6",
      "output": "-1"
    }
  ],
  "coci_note": [
    {
      "input": "1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n8 1 7 2 6 3 5 4",
      "output": "ascending\ndescending\nmixed"
    }
  ],
  "truck": [
    {
      "input": "180 160 170",
      "output": "CRASH 160"
    }
  ],
  "troy": [
    {
      "input": "5\n10000\n5\n2000",
      "output": "O\nX"
    }
  ],
  "div_mul(open)": [
    {
      "input": "2 4\n3 4",
      "output": "2 | 4\n3 !| 4"
    }
  ],
  "coci_spa": [
    {
      "input": "10 10\n0 30\n23 40",
      "output": "9 25\n23 45\n22 55"
    }
  ],
  "프로그램 명:leap_year": [
    {
      "input": "4\n100\n200\n400",
      "output": "YES\nNO\nNO\nYES"
    }
  ],
  "ATM(open)": [
    {
      "input": "30 120.00\n42 120.00\n300 120.00",
      "output": "89.50\n120.00\n120.00"
    }
  ],
  "calorie(open)": [
    {
      "input": "3 가지의 버거",
      "output": "1 . Cheeseburger (461 Calories)\n2 . Fish Burger (431 Calories)\n3 . Veggie Burger (420 Calories)\n4 . no burger\n3 가지 음료\n1 . Soft Drink ( 130 Calories)\n2 . Orange Juice (160 Calories)\n3 . Milk (118 Calories)\n4 . no drink\n3 가지 side order(추가 주문)\n1 . Fries (100 Calories)\n2 . Baked Potato (57 Calories)\n3 . Chef Salad (70 Calories)\n4 . no side order\n3 가지 디저트\n1 . Apple Pie (167 Calories)\n2 . Sundae (266 Calories)\n3 . Fruit Cup (75 Calories)\n4 . no dessert"
    }
  ],
  "fairy": [
    {
      "input": "2011\n2016",
      "output": "X\nO"
    }
  ],
  "punch_game": [
    {
      "input": "4 6 7 8 9",
      "output": "time out"
    }
  ],
  "even_odd(open)": [
    {
      "input": "5 8\n8 5\n5 3",
      "output": "odd+even=odd\nodd*even=even\neven+odd=odd\neven*odd=even\nodd+odd=even\nodd*odd=odd"
    }
  ],
  "fill": [
    {
      "input": "4.4 180 200\n5.5 350 700\n4.4 205 350\n5.2 210 500",
      "output": "Wide Receiver\nLineman\nWide Receiver Quarterback\nNo positions"
    }
  ],
  "whatisn": [
    {
      "input": "4",
      "output": "3"
    }
  ],
  "kangaroo": [
    {
      "input": "2 3 5\n3 5 9",
      "output": "1\n3"
    }
  ],
  "coci_kornislav": [
    {
      "input": "input",
      "output": "1 2 3 4\noutput\n3\ninput\n4 4 3 4\noutput\n12"
    }
  ],
  "can(open)": [
    {
      "input": "25 23\n16 4\n17 2",
      "output": "white\nblack\nblack"
    }
  ],
  "equation": [
    {
      "input": "3 2 3 2\n3 2 3 8\n4 2 3 8",
      "output": "many\nnone\n6.000"
    }
  ],
  "fourth": [
    {
      "input": "5 5\n5 7\n7 5\n30 20\n10 10\n10 20",
      "output": "7 7\n30 10"
    }
  ],
  "coci_tablica": [
    {
      "input": "1 2\n3 4\n5 9\n7 2\n41 99\n100 13",
      "output": "2\n0\n1"
    }
  ],
  "coci_sok(special judge)": [
    {
      "input": "10 10 10\n3 3 3\n9 9 9\n3 2 1\n10 15 18\n3 4 1",
      "output": "0 0 0\n0 3 6\n0 1.666667 14.666667"
    }
  ],
  "tri": [
    {
      "input": "2 3 5\n4 5 6",
      "output": "no\nyes"
    }
  ],
  "rao(open)": [
    {
      "input": "5 3 4",
      "output": "right"
    }
  ],
  "up_down": [
    {
      "input": "4\n2\n5\n3\n12",
      "output": "Byron"
    }
  ],
  "beat": [
    {
      "input": "40 20\n20 40",
      "output": "30 10\nimpossible"
    }
  ],
  "eva": [
    {
      "input": "1 2 3 4\n1 2 4 8",
      "output": "1 2 3 4 5\n1 2 4 8 16"
    }
  ],
  "reduction": [
    {
      "input": "560 400 218 280\n10 25 88 10\n8 13 5 1\n199 333 40 2",
      "output": "50%\n100%\n12%\n1%"
    }
  ],
  "tpz(open)": [
    {
      "input": "10\n8 7 9",
      "output": "7 4"
    }
  ],
  "cross(open)": [
    {
      "input": "20 80\n85 40",
      "output": "cross"
    }
  ],
  "pool": [
    {
      "input": "2\n0 0\n1 1\n1\n1 1",
      "output": "1\n-1"
    }
  ],
  "overlap(open)": [
    {
      "input": "1 1 2 2\n2 2 5 3",
      "output": "Overlap"
    }
  ],
  "rlpn": [
    {
      "input": "3 10 50 60 100 100 200 300\n45 50 600 600 400 450 500 543\n11 120 120 230 50 40 60 440\n35 56 67 90 67 80 500 600",
      "output": "none\nrectangle\nrectangle\nline"
    }
  ],
  "example_switch": [
    {
      "input": "2009 10",
      "output": "31"
    }
  ],
  "vauvau": [
    {
      "input": "2 2 3 3\n1 3 4\n2 3 4 5\n4 9 5",
      "output": "both\none\nnone\none\nnone\nnone"
    }
  ],
  "profit": [
    {
      "input": "100 10 10\n100 10 8",
      "output": "loss\n1"
    }
  ],
  "queen": [
    {
      "input": "입력 예",
      "output": "6 6\n출력 예\n6"
    }
  ],
  "clo": [
    {
      "input": "12\n6\n11",
      "output": "0.000000\n32.727273\nCAN'T SEE!"
    }
  ],
  "quadratic": [
    {
      "input": "1 -3 1",
      "output": "2\n0.382 2.618"
    }
  ],
  "bus": [
    {
      "input": "1\n15\n13\n0\n15\n15\n1\n15\n15",
      "output": "97.50\n7.50\n-1"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n#include < stdio.h >\n int main()\n{\n   int i;\n    for( i = 1 ; i <= 5 ; i++){\n      printf(\"hello\");\n   }\n }": [
    {
      "input": "차례:",
      "output": "-for\n-break\n-continue"
    }
  ],
  "seq(open)": [
    {
      "input": "3 6\n6 3",
      "output": "3 4 5 6\n3 4 5 6"
    }
  ],
  "sum": [
    {
      "input": "6 2 9 8 3 4 7",
      "output": "39"
    }
  ],
  "seq2": [
    {
      "input": "5",
      "output": "1..1 1\n1..2 3\n1..3 6\n1..4 10\n1..5 15"
    }
  ],
  "adigit": [
    {
      "input": "1 10 100 2 20 300 1",
      "output": "4 30 400"
    }
  ],
  "1ton1": [
    {
      "input": "5",
      "output": "1+2+3+4+5=15"
    }
  ],
  "mM": [
    {
      "input": "6 2 9 8 3 4 7",
      "output": "9 2"
    }
  ],
  "sb": [
    {
      "input": "6 2 9 8 1 4 7",
      "output": "3"
    }
  ],
  "3np1": [
    {
      "input": "4\n6",
      "output": "4 2 1\n6 3 10 5 16 8 4 2 1"
    }
  ],
  "odd": [
    {
      "input": "12\n77\n38\n41\n53\n92\n85",
      "output": "256\n41"
    }
  ],
  "1ton": [
    {
      "input": "5",
      "output": "15"
    }
  ],
  "Nsum(open)": [
    {
      "input": "45",
      "output": "9"
    }
  ],
  "fact": [
    {
      "input": "5",
      "output": "120"
    }
  ],
  "financial": [
    {
      "input": "100.00\n489.12\n12454.12\n1234.10\n823.05\n109.20\n5.27\n1542.25\n839.18\n83.99\n1295.01\n1.75",
      "output": "$1581.42"
    }
  ],
  "yaksu": [
    {
      "input": "6 ÷ 1 = 6 … 0",
      "output": "6 ÷ 2 = 3 … 0\n6 ÷ 3 = 2 … 0\n6 ÷ 4 = 1 … 2\n6 ÷ 5 = 1 … 1\n6 ÷ 6 = 1 … 0"
    }
  ],
  "ft": [
    {
      "input": "6",
      "output": "1 2 3 6\n4\n12\n6"
    }
  ],
  "complete": [
    {
      "input": "6\n8",
      "output": "yes\nno"
    }
  ],
  "perfect": [
    {
      "input": "15\n28\n56",
      "output": "15  DEFICIENT\n28  PERFECT\n56  ABUNDANT"
    }
  ],
  "validate": [
    {
      "input": "0 4 2 5 6",
      "output": "1"
    }
  ],
  "center1": [
    {
      "input": "6\n10",
      "output": "O\nX"
    }
  ],
  "triangular_sum(open)": [
    {
      "input": "3",
      "output": "45"
    }
  ],
  "modular_inverse(open)": [
    {
      "input": "4 17\n6 10",
      "output": "13\nNo such integer exists."
    }
  ],
  "lunacy": [
    {
      "input": "100.0\n12.0\n0.12\n120000.0\n-1.0",
      "output": "Objects weighing 100.00 on Earth will weigh 16.70 on the moon.\nObjects weighing 12.00 on Earth will weigh 2.00 on the moon.\nObjects weighing 0.12 on Earth will weigh 0.02 on the moon.\nObjects weighing 120000.00 on Earth will weigh 20040.00 on the moon."
    }
  ],
  "ftod(open)": [
    {
      "input": "6 7 2",
      "output": "0.85"
    }
  ],
  "chemistry": [
    {
      "input": "10.0\n12.05\n30.25\n20\n999",
      "output": "2.05\n18.20\n-10.25\nEnd of Output"
    }
  ],
  "arith_seq(open)": [
    {
      "input": "1 2 9\n2 2 9",
      "output": "5\nX"
    }
  ],
  "selfdup": [],
  "rounders(open)": [
    {
      "input": "15\n5\n99\n12345678\n44444445",
      "output": "20\n5\n100\n10000000\n50000000"
    }
  ],
  "sc": [
    {
      "input": "100 90 60 58 -1",
      "output": "4\n2\n0\n0\n1\n1"
    }
  ],
  "hangover": [
    {
      "input": "1.00\n3.71\n0.04\n5.19",
      "output": "3 card(s)\n61 card(s)\n1 card(s)\n273 card(s)"
    }
  ],
  "usa_skidesign": [
    {
      "input": "5\n20\n4\n1\n24\n21",
      "output": "18"
    }
  ],
  "oddddo(open)": [
    {
      "input": "1 3 5",
      "output": "5 3 1\n------\n5 9 5"
    }
  ],
  "nf": [
    {
      "input": "4\n8",
      "output": "yes\nno"
    }
  ],
  "prime": [
    {
      "input": "4\n7",
      "output": "not prime\nprime"
    }
  ],
  "tf": [
    {
      "input": "24",
      "output": "3 3"
    }
  ],
  "fou(open,special judge)": [
    {
      "input": "4 6 8\n10 1 4",
      "output": "10\n7"
    }
  ],
  "bit_pos": [
    {
      "input": "13",
      "output": "0 2 3"
    }
  ],
  "parking": [
    {
      "input": "4\n24 13 89 37\n6\n7 30 41 14 39 42",
      "output": "152\n70"
    }
  ],
  "speed_limit": [
    {
      "input": "3\n20 2\n30 6\n10 7\n2\n60 1\n30 5\n4\n15 1\n25 2\n30 3\n10 5",
      "output": "170 miles\n180 miles\n90 miles"
    }
  ],
  "6174": [
    {
      "input": "8200 - 0028 = 8172",
      "output": "8721 - 1278 = 7443\n7443 - 3447 = 3996\n9963 - 3699 = 6264\n6642 - 2466 = 4176\n7641 - 1467 = 6174\n7641 - 1467 = 6174"
    }
  ],
  "square": [
    {
      "input": "60\n100",
      "output": "245\n64"
    }
  ],
  "steps": [
    {
      "input": "4 2\n6 6\n3 4",
      "output": "6\n12\nNo Number"
    }
  ],
  "count": [
    {
      "input": "14",
      "output": "14 IS 2/4"
    }
  ],
  "chessboard": [
    {
      "input": "8\n20\n25",
      "output": "2 3\n5 4\n1 5"
    }
  ],
  "cha": [
    {
      "input": "5 3",
      "output": "5 3 2 1 1 0 1"
    }
  ],
  "layout": [
    {
      "input": "35\n10 5\n20 12\n8 13\n-1 -1\n25\n10 5\n20 13\n3 12\n-1 -1\n15\n5 17\n5 17\n5 17\n7 9\n7 20\n2 10\n-1 -1",
      "output": "30 x 25\n23 x 18\n15 x 47"
    }
  ],
  "ncpc_soda": [
    {
      "input": "9 0 3\n5 5 2",
      "output": "4\n9"
    }
  ],
  "cycling": [
    {
      "input": "5\n1 2 1 4 6\n8\n12 20 1 3 4 4 11 1\n6\n10 8 8 6 4 3",
      "output": "5\n8\n0\n두번 째 예에서 오르막은  12-20, 1-3-4, and 4-11 이고  1-3-4-4-11 는 오르막이 아니다."
    }
  ],
  "coins": [
    {
      "input": "- 앞 앞 앞",
      "output": "- 앞 앞 뒤\n- 앞 뒤 뒤\n- 뒤 뒤 뒤"
    }
  ],
  "ants": [
    {
      "input": "10 3\n2 6 7\n214 7\n11 12 7 13 176 23 191",
      "output": "4 8\n38 207"
    }
  ],
  "log": [
    {
      "input": "18\n19",
      "output": "6 3\n6 1"
    }
  ],
  "when_is_1231(open)": [
    {
      "input": "5 3\n1 2 6\n18",
      "output": "4"
    }
  ],
  "antseries": [
    {
      "input": "1",
      "output": "1 1\n2 1\n1 2 1 1\n1 1 1 2 2 1\n...."
    }
  ],
  "tea(open)": [
    {
      "input": "4\n5\n2",
      "output": "2\n4\n0"
    }
  ],
  "flea(open)": [
    {
      "input": "10 2 3 3 2\n100 49 73 214 38\n25 0 0 5 25\n407 1270 1323 1 1\n18 72 6 18 6\n407 1270 1170 100 114",
      "output": "After 3 jumps the flea lands at (11, 9).\nAfter 1 jumps the flea lands at (263, 111).\nThe flea cannot escape from black squares.\nAfter 306 jumps the flea lands at (1576, 1629).\nThe flea cannot escape from black squares.\nAfter 0 jumps the flea lands at (1270, 1170)."
    }
  ],
  "buttons": [
    {
      "input": "3",
      "output": "2"
    }
  ],
  "squ": [
    {
      "input": "3 2",
      "output": "6"
    }
  ],
  "fibonacci": [
    {
      "input": "6\n2\n4\n3\n-2",
      "output": "Case #1:\n13, 8\nCase #2:\n2, 1\nCase #3:\n5, 3\nCase #4:\n2, 3"
    }
  ],
  "luckynum(open)": [
    {
      "input": "5",
      "output": "74"
    }
  ],
  "ctu_stock": [
    {
      "input": "3 1\n1 2 3\n3 1000\n1200 40 10\n3 10\n3 4 5\n5 10\n2 3 7 1 4",
      "output": "2\n0\n6\n30"
    }
  ],
  "rational_times": [
    {
      "input": "5\n1.48\n2.82\n3.24\n2.88\n4.32\n3\n2134.66\n1352.34\n2938.19",
      "output": "1.682411 2\n8.481926 9"
    }
  ],
  "cont_prime": [
    {
      "input": "139 5\n24 4",
      "output": "yes\nno"
    }
  ],
  "dfreq": [
    {
      "input": "11 1",
      "output": "4"
    }
  ],
  "coci_jabuka(special judge)": [
    {
      "input": "input",
      "output": "4 8\noutput\n1 4 8\n2 2 4\n4 1 2\ninput\n15 12\noutput\n3 5 4\n1 15 12\ninput\n42 105\noutput\n1 42 105\n3 14 35\n7 6 15\n21 2 5"
    }
  ],
  "pie": [
    {
      "input": "1 4\n1 4\n1 4\n2 3\n33 99\n66 99\n2 17\n5 23",
      "output": "1/2\n1/12\n0\n260/391"
    }
  ],
  "extended_euclid": [
    {
      "input": "4 6\n17 17",
      "output": "-1 1 2\n0 1 17"
    }
  ],
  "coci_pascal": [
    {
      "input": "int counter=0;",
      "output": "int i,n;\nscanf(\"%d\",&n);\nfor(i = n-1 ; i >= 1 ; i--){\ncounter++;\nif ( n % i == 0 ) break;\n}\nprintf(\"%d\\n\",counter);"
    }
  ],
  "divisor1": [
    {
      "input": "2300 2410",
      "output": "2 4705"
    }
  ],
  "paradox(open)": [
    {
      "input": "365\n0\n23",
      "output": "1.000000\n0.000000\n0.507297"
    }
  ],
  "midp": [
    {
      "input": "3\n2 4\n2 6\n3 4",
      "output": "1\n데이터의 50%는 N<=1000 이다."
    }
  ],
  "insubunE(open)": [
    {
      "input": "4 3\n5 2",
      "output": "(x-1)(x-3)\nimpossible"
    }
  ],
  "pythagoras(special judge)": [
    {
      "input": "5",
      "output": "3 4"
    }
  ],
  "e(special judge)": [],
  "interest": [
    {
      "input": "5 5000 4",
      "output": "6077"
    }
  ],
  "egyptian_fraction(special judge)": [
    {
      "input": "3 5\n19 20\n5 7\n7 23",
      "output": "1/2 1/10\n1/2 1/3 1/9 1/180\n1/2 1/5 1/70\n1/4 1/19 1/583 1/1019084"
    }
  ],
  "cfrac(open)": [
    {
      "input": "3 4",
      "output": "1 3"
    }
  ],
  "rendezvous(open)": [
    {
      "input": "2 3",
      "output": "5"
    }
  ],
  "?\n1\n2\n3\n4\n5\nfor( i = 1 ; i <=2 ; i++){\n   for( j = 1 ; j <= 3 ; j++){\n      printf(\"hello\");\n   }\n}": [],
  "tri2": [
    {
      "input": "5",
      "output": "*****\n****\n***\n**\n*"
    }
  ],
  "tri3": [
    {
      "input": "5",
      "output": "*****\n****\n***\n**\n*"
    }
  ],
  "nemo": [
    {
      "input": "4",
      "output": "****\n*  *\n*  *\n****"
    }
  ],
  "printF": [
    {
      "input": "5\n7",
      "output": "*****\n*\n*****\n*\n*\n*******\n*\n*\n*******\n*\n*\n*"
    }
  ],
  "printT": [
    {
      "input": "5",
      "output": "*****\n*\n*\n*\n*"
    }
  ],
  "printH": [
    {
      "input": "5",
      "output": "*   *\n*   *\n*****\n*   *\n*   *"
    }
  ],
  "zorro": [
    {
      "input": "5",
      "output": "*****\n*\n*\n*\n*****"
    }
  ],
  "diamond": [
    {
      "input": "2\n3",
      "output": "*\n***\n*\n*\n***\n*****\n***\n*"
    }
  ],
  "oscilloscope": [
    {
      "input": "1v(전압)를 걸때 1Vp,-1Vp, 주기가 2ms인 톱니파를 발생한다.",
      "output": "2v 일때 2Vp,-2Vp , 4ms\n3v 일때 3Vp,-3Vp , 6ms\n........."
    }
  ],
  "bui": [
    {
      "input": "**<--------n------>**",
      "output": "*  *               *  *\n*  *             *  *\n*  *           *  *\n*  *         *  *\n*  *       *  *\n*  *     *  *\n*  *   *  *\n*  * *  *\n*  *  *\n*   *\n* *\n*"
    }
  ],
  "54321": [
    {
      "input": "5",
      "output": "54321\n4321\n321\n21\n1"
    }
  ],
  "b54321": [
    {
      "input": "5",
      "output": "54321\n4321\n321\n21\n1"
    }
  ],
  "ddiamond": [
    {
      "input": "5",
      "output": "1\n121\n12321\n121\n1"
    }
  ],
  "gseries": [
    {
      "input": "3",
      "output": "10"
    }
  ],
  "ate": [
    {
      "input": "196\n239",
      "output": "3\n0"
    }
  ],
  "grp": [
    {
      "input": "100 3",
      "output": "19"
    }
  ],
  "electrical_outlets": [
    {
      "input": "3\n3 2 3 4\n10 4 4 4 4 4 4 4 4 4 4\n4 10 10 10 10",
      "output": "7\n31\n37"
    }
  ],
  "sugar": [
    {
      "input": "4\n9\n18",
      "output": "-1\n3\n4"
    }
  ],
  "dice": [
    {
      "input": "9",
      "output": "3 6\n4 5\n5 4\n6 3"
    }
  ],
  "dice1": [
    {
      "input": "9",
      "output": "3 6\n4 5"
    }
  ],
  "somenum(open)": [],
  "multofn": [
    {
      "input": "2",
      "output": "27"
    }
  ],
  "mask": [
    {
      "input": "ABC",
      "output": "+ CCA\n------\n1AB2"
    }
  ],
  "amstrong": [],
  "table(open)": [
    {
      "input": "1     2     3     4     5     6     7     8     9    10",
      "output": "2     2     4     8    16    32    64   128   256   512  1024\n3     3     9    27    81   243   729  2187  6561 19683 59049"
    }
  ],
  "the_king": [
    {
      "input": "3\n3\n2 -1 1",
      "output": "9"
    }
  ],
  "well_order(open)": [],
  "dcomplete": [
    {
      "input": "10\n30",
      "output": "6\n6\n28"
    }
  ],
  "lock": [
    {
      "input": "0 30 0 30\n5 35 5 35\n0 20 0 20\n7 27 7 27\n0 10 0 10\n9 19 9 19\n0 0 0 0",
      "output": "1350\n1350\n1620\n1620\n1890\n1890"
    }
  ],
  "amicable": [
    {
      "input": "300",
      "output": "220 284"
    }
  ],
  "3nplusone": [
    {
      "input": "3 5",
      "output": "8"
    }
  ],
  "jinjin": [
    {
      "input": "7\n5 3\n6 2\n7 2\n5 3\n5 4\n0 4\n0 6\n1\n4 4",
      "output": "3\n0"
    }
  ],
  "ncpc_event": [
    {
      "input": "3 1000 2 3 //미팅의 참가자수 , 예산 , 호텔의수 , 가능한 주(1~weekend)",
      "output": "200 // 첫번째 호텔의 인당 숙박비\n0 2 2 //첫번째 호텔의  각 주말마다 숙박가능한 인원\n300 // 두번째 호텔의 ...\n27 3 20"
    }
  ],
  "nOf": [
    {
      "input": "5 2",
      "output": "3"
    }
  ],
  "pfactor": [
    {
      "input": "5\n10\n20\n8",
      "output": "5\n2 5\n2 2 5\n2 2 2"
    }
  ],
  "decomp(open)": [
    {
      "input": "20\n7",
      "output": "2 2 5\n7"
    }
  ],
  "climbing": [
    {
      "input": "10 2 1\n20 3 1\n0 0 0",
      "output": "17\n19"
    }
  ],
  "mchain": [
    {
      "input": "5",
      "output": "7"
    }
  ],
  "make_square(open)": [
    {
      "input": "8",
      "output": "2"
    }
  ],
  "herd": [
    {
      "input": "15",
      "output": "4"
    }
  ],
  "quirk": [
    {
      "input": "2",
      "output": "00\n01\n81"
    }
  ],
  "cube": [
    {
      "input": "24",
      "output": "Cube = 6, Triple = (3,4,5)\nCube = 12, Triple = (6,8,10)\nCube = 18, Triple = (2,12,16)\nCube = 18, Triple = (9,12,15)\nCube = 19, Triple = (3,10,18)\nCube = 20, Triple = (7,14,17)\nCube = 24, Triple = (12,16,20)"
    }
  ],
  "beer (special judge)": [
    {
      "input": "12\n13\n1000000",
      "output": "3 2 2\n1 13 1\n100 100 100"
    }
  ],
  "blocks": [
    {
      "input": "5\n9\n10\n26\n27\n100",
      "output": "30\n34\n82\n54\n130"
    }
  ],
  "lagrange": [
    {
      "input": "1\n25\n2003\n211\n20007",
      "output": "1\n3\n48\n7\n738"
    }
  ],
  "se(open)": [
    {
      "input": "3\n25",
      "output": "3\n7"
    }
  ],
  "rprint": [
    {
      "input": "4\n-9 1 2 3",
      "output": "3 2 1 -9"
    }
  ],
  "pmin": [
    {
      "input": "4\n5 2 10 2",
      "output": "2 4"
    }
  ],
  "white": [
    {
      "input": "0 1 2 2 2 7\n2 1 2 1 2 1",
      "output": "1 0 0 0 0 1\n-1 0 0 1 0 7"
    }
  ],
  "pir(special judge)": [
    {
      "input": "28 -28 27 3 -22 29 2 1 -2 16 -8 5 -7 21 -25 -14 26 -20 15 21",
      "output": "57\n29 28"
    }
  ],
  "dwarf(special judge)": [
    {
      "input": "7\n8\n10\n13\n15\n19\n20\n23\n25\n8\n6\n5\n1\n37\n30\n28\n22\n36",
      "output": "7\n8\n10\n13\n19\n20\n23\n8\n6\n5\n1\n30\n28\n22"
    }
  ],
  "jumsu": [
    {
      "input": "10\n1 0 1 1 1 0 0 1 1 0",
      "output": "10"
    }
  ],
  "variation": [
    {
      "input": "4\n1 2 3 4",
      "output": "1.25"
    }
  ],
  "box_brick": [],
  "above_average": [
    {
      "input": "7\n100 95 90 80 70 60 50",
      "output": "57.143%"
    }
  ],
  "baby_gin(open)": [
    {
      "input": "6 6 7 7 6 7\n0 5 4 0 6 0\n1 0 1 1 2 3",
      "output": "gin\ngin\nlose"
    }
  ],
  "soccer_judgement": [
    {
      "input": "첫번째 줄에는 나라의 수(1 <= n <= 20)와 심판의 수(1 <= m <= 100)가 주어지고",
      "output": "나라수만큼 반복\n{\n두번째 줄에는 각 나라에서 투표에 참여한 전체 사람수와, 투표된 심판(1 <= k <= m)의 수가주어진다.\n세번째 줄부터는 심판의 번호와 그 심판이 얻은 표가 주어진다. (꼭 표의 합이 전체 투표사람수가 되지는 않는다. 기권도있으니..)\n}"
    }
  ],
  "dfact": [],
  "big_clock": [
    {
      "input": "1:00\n01:01\n00:00",
      "output": "13\n0\n12"
    }
  ],
  "hay": [
    {
      "input": "4 2\n5\n8\n12\n6\n1 3\n2 4",
      "output": "25\n26"
    }
  ],
  "distinct": [
    {
      "input": "10\n1 2 3 4 5 4 3 2 1 2",
      "output": "5"
    }
  ],
  "ma": [
    {
      "input": "6 2 9 8 3 4 7 0",
      "output": "*\n* *\n* *     *\n*   * *     *\n*   * *     *\n*   * *   * *\n*   * * * * *\n* * * * * * *\n* * * * * * *\n6 2 9 8 3 4 7"
    }
  ],
  "rsq": [
    {
      "input": "7\n6 2 9 8 3 4 7\n3\n1 1\n1 2\n3 7",
      "output": "6\n8\n31"
    }
  ],
  "d_game": [
    {
      "input": "3\n3 3 6\n2 2 2\n6 2 5",
      "output": "12000"
    }
  ],
  "when": [
    {
      "input": "3 2\n2 1 4\n0\n3 3 4 8\n3 2\n4 1 5 8 9\n3 2 5 9\n5 2 4 5 7 9\n3 3\n2 1 4\n3 2 5 9\n2 2 4\n3 3\n2 1 2\n3 1 2 9\n2 2 4",
      "output": "4\n5\n0\n2"
    }
  ],
  "doubles": [],
  "coci_modulo": [
    {
      "input": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n39\n40\n41\n42\n43\n44\n82\n83\n84\n85",
      "output": "10\n1\n6"
    }
  ],
  "coci_parking": [
    {
      "input": "5 3 1\n1 6\n3 5\n2 8\n10 8 6\n15 30\n25 50\n70 80",
      "output": "33\n480"
    }
  ],
  "shuffle": [
    {
      "input": "5 2\n3 1\n3 1\n10 3\n1 10\n10 1\n8 3\n0 0",
      "output": "4\n4"
    }
  ],
  "dream_counting": [
    {
      "input": "129 137",
      "output": "1 10 2 9 1 1 1 1 0 1"
    }
  ],
  "linear": [
    {
      "input": "7\n1 2 3 4 6 8 9",
      "output": "5"
    }
  ],
  "packet(open)": [
    {
      "input": "5 3 0 1 1 0",
      "output": "2"
    }
  ],
  "vito": [
    {
      "input": "2\n2 4\n3\n2 4 6",
      "output": "2\n4"
    }
  ],
  "gold_coin": [
    {
      "input": "10\n100",
      "output": "10 30\n100 945"
    }
  ],
  "ccc_bridgetrans": [
    {
      "input": "100\n6\n50\n30\n10\n10\n40\n50\n100\n3\n150\n1\n1",
      "output": "5\n0"
    }
  ],
  "snotes": [
    {
      "input": "악보     1   1   2   3   3   3",
      "output": "+---+---+---+---+---+---+\n시각     0   1   2   3   4   5"
    }
  ],
  "tiger (special judge)": [
    {
      "input": "6 41\n7 218",
      "output": "2\n7\n10\n21"
    }
  ],
  "lotto": [
    {
      "input": "7 1 2 3 4 5 6 7\n8 1 2 3 5 8 13 21 34",
      "output": "1 2 3 4 5 6\n1 2 3 4 5 7\n1 2 3 4 6 7\n1 2 3 5 6 7\n1 2 4 5 6 7\n1 3 4 5 6 7\n2 3 4 5 6 7\n1 2 3 5 8 13\n1 2 3 5 8 21\n1 2 3 5 8 34\n1 2 3 5 13 21\n1 2 3 5 13 34\n1 2 3 5 21 34\n1 2 3 8 13 21\n1 2 3 8 13 34\n1 2 3 8 21 34\n1 2 3 13 21 34\n1 2 5 8 13 21\n1 2 5 8 13 34\n1 2 5 8 21 34\n1 2 5 13 21 34\n1 2 8 13 21 34\n1 3 5 8 13 21\n1 3 5 8 13 34\n1 3 5 8 21 34\n1 3 5 13 21 34\n1 3 8 13 21 34\n1 5 8 13 21 34\n2 3 5 8 13 21\n2 3 5 8 13 34\n2 3 5 8 21 34\n2 3 5 13 21 34\n2 3 8 13 21 34\n2 5 8 13 21 34\n3 5 8 13 21 34"
    }
  ],
  "meat": [
    {
      "input": "5 9 4 2 8 3\n5 3 9 4 2 8",
      "output": "Sam stops at position 2 and Ella stops at position 3.\nNo equal partitioning."
    }
  ],
  "coci_higher(open)": [
    {
      "input": "156\n330",
      "output": "165\n0"
    }
  ],
  "prd(open)": [
    {
      "input": "3",
      "output": "5"
    }
  ],
  "bank1": [
    {
      "input": "2\n1 4 20\n2 10 30",
      "output": "7.0"
    }
  ],
  "penta(open)": [
    {
      "input": "5\n5\n8\n22\n174\n590",
      "output": "5 Y\n8 N\n22 Y\n174 N\n590 Y"
    }
  ],
  "ambiguous": [
    {
      "input": "4\n1 4 3 2\n1\n1",
      "output": "ambiguous\n5\n2 3 4 5 1\nnot ambiguous\nambiguous"
    }
  ],
  "candy": [
    {
      "input": "4\n2 4 6 8",
      "output": "4 8"
    }
  ],
  "roller_coaster": [
    {
      "input": "3\n4 6 4\n1 4 2 1\n100 10 1\n1\n5 5 10\n2 4 2 3 4 2 1 2 1 3",
      "output": "Case #1: 21\nCase #2: 100\nCase #3: 20"
    }
  ],
  "inversion": [
    {
      "input": "8\n5 3 4 0 2 1 1 0",
      "output": "4 8 6 2 5 1 3 7"
    }
  ],
  "line": [
    {
      "input": "5\n0 1 1 3 2",
      "output": "4 2 5 3 1"
    }
  ],
  "ms": [
    {
      "input": "9\n1 2 2 4 4 5 7 7 2\n9\n4 1 3 3 2 2 9 2 3\n11\n1 5 3 6 4 7 1 3 2 9 5",
      "output": "8\n4\n2"
    }
  ],
  "stump": [
    {
      "input": "9\n1\n2\n5\n4\n3\n3\n6\n6\n2",
      "output": "3\n7\n8"
    }
  ],
  "minterval": [
    {
      "input": "-2\n9\n2\n-6\n7\n-7\n5\n0",
      "output": "12"
    }
  ],
  "card_trick": [
    {
      "input": "4\n5",
      "output": "2 1 4 3\n3 1 4 5 2"
    }
  ],
  "digit_game": [
    {
      "input": "3\n7 5 5 4 9\n1 1 1 1 1\n2 3 3 2 10",
      "output": "1"
    }
  ],
  "print": [
    {
      "input": "6 0\n1 1 9 1 1 1\n4 2\n1 2 3 4\n1 0\n5",
      "output": "5\n2\n1"
    }
  ],
  "choice": [
    {
      "input": "7\n3\n1\n1\n5\n5\n4\n6",
      "output": "3\n1\n3\n5"
    }
  ],
  "baseball": [
    {
      "input": "민혁: 123",
      "output": "영수: 1 스트라이크 1 볼.\n민혁: 356\n영수: 1 스트라이크 0 볼.\n민혁: 327\n영수: 2 스트라이크 0 볼.\n민혁: 489\n영수: 0 스트라이크 1 볼."
    }
  ],
  "switch": [
    {
      "input": "8\n0 1 0 1 0 0 0 1\n2\n1 3\n2 3",
      "output": "1 0 0 0 1 1 0 1"
    }
  ],
  "wavelet": [
    {
      "input": "s(i) = a(2*i-1) + a(2*i) // 인접한 수의 합",
      "output": "d(i) = a(2*i-1) - a(2*i) // 인접한 앞수 - 뒤수"
    }
  ],
  "poly": [
    {
      "input": "10\n1 4 1 1 4 3 3 3 2 2\n3\n3 2 2 1 4 1 1 4 3 3\n1 4 4 3 3 3 2 1 1 2\n4 4 1 1 1 2 3 3 2 3",
      "output": "2\n3 2 2 1 4 1 1 4 3 3\n4 4 1 1 1 2 3 3 2 3"
    }
  ],
  "parencoding": [
    {
      "input": "S     (((()()())))",
      "output": "P-sequence   4 5 6666\nW-sequence   1 1 1456"
    }
  ],
  "count_sort": [
    {
      "input": "7\n6 2 9 8 3 4 7",
      "output": "2 3 4 6 7 8 9"
    }
  ],
  "genes": [
    {
      "input": "9\n1\n3 6\n4\n1\n3\n5\n1\n5\n2\n1 2\n1 5\n2\n5\n2",
      "output": "1\n6\n4\n1\n1\n5"
    }
  ],
  "sort_by_swaping(open)": [
    {
      "input": "2 3 5 4 1",
      "output": "1 3 5 4 2\n1 3 2 4 5\n1 2 3 4 5"
    }
  ],
  "brainman(open)": [
    {
      "input": "Start with: 2 8 0 3",
      "output": "swap (2 8) 8 2 0 3\nswap (2 0) 8 0 2 3\nswap (2 3) 8 0 3 2\nswap (8 0) 0 8 3 2\nswap (8 3) 0 3 8 2\nswap (8 2) 0 3 2 8\nswap (3 2) 0 2 3 8\nswap (3 8) 0 2 8 3\nswap (8 3) 0 2 3 8"
    }
  ],
  "sacrament": [
    {
      "input": "4\n-175\n19\n19\n10424\n3\n8951\n-424\n-788",
      "output": "YES"
    }
  ],
  "fibo": [
    {
      "input": "3",
      "output": "5"
    }
  ],
  "new_fibo": [
    {
      "input": "4\n1 1 5\n1 1 6\n1 2 6\n3 6 9",
      "output": "5\n8\n13\n165"
    }
  ],
  "interpreter": [
    {
      "input": "299\n492\n495\n399\n492\n495\n399\n283\n279\n689\n078\n100\n000\n000\n000",
      "output": "16"
    }
  ],
  "locker(open,special judge)": [
    {
      "input": "10\n9 2 1 10 3 4 5 6 7 8",
      "output": "3\n7 9\n5"
    }
  ],
  "jail": [
    {
      "input": "감옥이 n개가 있었습니다. 감옥 하나에 1명의 죄수가 들어있습니다.",
      "output": "그런데, 어느날 간수랑 로비라도 했는지, 간수가 1번 방의 죄수에게 열쇠를 줘버립니다.\n그래서 죄수는 나오기로 결심을 했지요.\n그런데, 감옥 하나에 일일이 다른 열쇠 만들기도 귀찮았는지, 그 열쇠가 모든 감옥을 열 수 있게 되어있었던것이지요.\n그래서, 이 멋진놈은 나오면서 99개의 감옥을 다 풀어버렸습니다!\n근데 문제는 여기서 발생합니다.\n속좁은 죄수놈들이 중범죄를 가진게 아닌지라 나갈까 말까 고민을 합니다.\n그사이에, 2번째 죄수가 감옥에서 나오면서, 갑자기 짝수번 감옥을 다 닫아버립니다.\n그러자, 3번 죄수는 그게 재밌어 보였는지, 나오면서 3의 배수에 해당하는 감옥을 닫힌건 열고 열린건 닫습니다.\n그런식으로 더이상 나올 수 있는 죄수가 없을때까지 번호 순서대로 나와서 같은 행위를 계속 합니다.\n예를 들어\nn=10이면\n1 2 3 4 5 6 7 8 9 10\n첫번째 죄수는 나가면서 다엽니다. 나간걸 f, 닫힌건 c,  열린건 o라 합시다.\nf o o o o o o o o o\n그리고 두번째 죄수는, 짝수번을 닫습니다.\nf f o c o c o c o c\n세번째 죄수는, 3의 배수를 닫힌건 열고 열린건 닫습니다.\nf f f c o o o c c c\n네번째 죄수는, c라서 못나갑니다.\nf f f c o o o c c c\n다섯번째 죄수는, 5의 배수를 닫힌건 열고, 열린건 닫습니다.\nf f f c f o o c c o\n여섯번째 죄수도 마찬가지\nf f f c f f o c c o\n일곱번째는\nf f f c f f f c c o\n여덟번째는 못나가죠.\nf f f c f f f c c o\n아홉번째도 못나갑니다.\nf f f c f f f c c o\n열번째가 나가면!\nf f f c f f f c c f\n따라서, 나간사람이 일곱, 못나간사람이 셋이죠. 이게 10개일때입니다.\n문제는 주어진 n에 대하여 나간 사람의 수를 출력하는겁니다."
    }
  ],
  "recurring(open)": [
    {
      "input": "3\n7",
      "output": "1\n6"
    }
  ],
  "field(open)": [
    {
      "input": "7\n4 50\n2 160\n3 30\n1 60\n3 20\n1 100",
      "output": "47600"
    }
  ],
  "ugly": [
    {
      "input": "7\n11",
      "output": "The 7'th ugly number is 8.\nThe 11'th ugly number is 15."
    }
  ],
  "lineup": [
    {
      "input": "14 5\n1\n5\n3\n2\n5\n1\n3\n4\n4\n2\n5\n1\n2\n3",
      "output": "3"
    }
  ],
  "cskyline(open)": [
    {
      "input": "..........................",
      "output": ".....XX.........XXX.......\n.XXX.XX.......XXXXXXX.....\nXXXXXXXXXX....XXXXXXXXXXXX"
    }
  ],
  "matti_block": [
    {
      "input": "4\n2 0 3 1\n1 1 2 3",
      "output": "7 17"
    }
  ],
  "time": [
    {
      "input": "1\n475656",
      "output": "1970-01-01 09:00:01\n1970-01-06 21:07:36"
    }
  ],
  "eratosthenes": [
    {
      "input": "10",
      "output": "2 3 5 7"
    }
  ],
  "modulo(open)": [
    {
      "input": "5 6 7 8 9\n0 6 7 9 13",
      "output": "yes\nyes"
    }
  ],
  "jolly": [
    {
      "input": "4\n1 4 2 3\n5\n1 4 2 -1 6",
      "output": "Jolly\nNot jolly"
    }
  ],
  "multiple(special judge)": [
    {
      "input": "5\n1\n2\n3\n4\n1",
      "output": "2\n2\n3"
    }
  ],
  "bubble": [
    {
      "input": "6 2 9 8 3 4 7",
      "output": "1 번째 스텝: 2 6 8 3 4 7 9\n2 번째 스텝: 2 6 3 4 7 8 9"
    }
  ],
  "shake": [
    {
      "input": "7\n6 2 9 8 3 4 7",
      "output": "3"
    }
  ],
  "selection1": [
    {
      "input": "6 2 9 8 3 4 7",
      "output": "1 번째 스텝: 2 6 9 8 3 4 7\n2 번째 스텝: 2 3 9 8 6 4 7"
    }
  ],
  "selection2": [
    {
      "input": "6 2 9 8 1 4 7",
      "output": "1 번째 스텝: 1 6 9 8 2 4 7\n2 번째 스텝: 1 2 9 8 6 4 7\n3 번째 스텝: 1 2 4 9 8 6 7"
    }
  ],
  "insertion": [
    {
      "input": "6 2 9 8 3 4 7",
      "output": "1 번째 스텝: 6 2 9 8 3 4 7 (원 데이터와 그대로)\n2 번째 스텝: 2 6 9 8 3 4 7\n3 번째 스텝: 2 6 9 8 3 4 7\n4 번째 스텝: 2 6 8 9 3 4 7"
    }
  ],
  "heapsort": [
    {
      "input": "7\n6 2 9 8 3 4 7",
      "output": "9 8 7 2 3 4 6\n6 3 4 2"
    }
  ],
  "radix_sort(open)": [
    {
      "input": "14\n10 42 12 235 875 16 6 7 77 38 8 88 29 129",
      "output": "6 7 8 10 12 16 29 129 235 38 42 875 77 88"
    }
  ],
  "radixsort": [
    {
      "input": "10 2\n35\n3\n66\n530\n1\n29\n601\n6\n984\n8",
      "output": "1\n601\n3\n6\n8\n29\n530\n35\n66\n984"
    }
  ],
  "double_queue": [
    {
      "input": "2\n1 20 14\n1 30 3\n2\n1 10 99\n3\n2\n2\n0",
      "output": "0\n20\n30\n10\n0"
    }
  ],
  "rocker1": [
    {
      "input": "10 5\n5 5 5 5 5 5 5 5 5 5\n5 6\n4 3 4 4 5\n10 5\n3 5 1 2 3 5 4 1 1 5",
      "output": "1\n1\n4\n*위 보기에서는 1 2 1 1 로 넣으면 4 곡"
    }
  ],
  "representative": [
    {
      "input": "10\n40\n30\n60\n30",
      "output": "34\n30"
    }
  ],
  "icpc": [
    {
      "input": "3\n1000\n342\n0\n5\n2\n2\n9\n11\n932\n5\n300\n1000\n0\n200\n400\n8\n353\n242\n402\n274\n283\n132\n402\n523",
      "output": "342\n7\n300\n326"
    }
  ],
  "tour": [
    {
      "input": "2 4\n40 50\n12 14 16 19",
      "output": "1.19"
    }
  ],
  "jolly_sort(special judge)": [
    {
      "input": "9\n1 5 6 8 9 2 3 4 7",
      "output": "1 5 2 4 3 9 6 8 7"
    }
  ],
  "Festival_Maze(open,special judge)": [
    {
      "input": "5\n1 2 3 4 5\n4 1 3 5 2",
      "output": "1 2\n4 5\n2 3\n3 4\n2 3"
    }
  ],
  "rank_sort": [
    {
      "input": "5\n97\n65\n84\n84\n91",
      "output": "1\n5\n3\n3\n2"
    }
  ],
  "rank1": [
    {
      "input": "5\n97\n65\n84\n84\n91",
      "output": "97 1\n91 2\n84 3\n84 3\n65 5"
    }
  ],
  "strategies(open)": [
    {
      "input": "180 6\n23 42 170 33 7 19\n60 2\n43 17",
      "output": "Steve wins with 5 solved problems and a score of 288.\nSteve wins with 2 solved problems and a score of 77."
    }
  ],
  "notaskwhy": [
    {
      "input": "9\n1 2\n3 10\n1 30\n1 31\n4 1\n2 1\n4 2\n3 1\n2 30",
      "output": "1 2\n1 30\n1 31\n4 2\n4 1\n2 30\n2 1\n3 1\n3 10"
    }
  ],
  "milking_cow(open)": [
    {
      "input": "|+++++++++++++++++++++++++|",
      "output": "|+++++++|++++++++++++++++++|      |        |+++++++|\n|       |                  |      |        |       |\n----------------------------------------------------------------\n300     700               1000    1200     1500    2100"
    }
  ],
  "fraction": [
    {
      "input": "5",
      "output": "0/1\n1/5\n1/4\n1/3\n2/5\n1/2\n3/5\n2/3\n3/4\n4/5\n1/1"
    }
  ],
  "painter": [
    {
      "input": "3 40 95 21 0\n7 25 60 400 250 0 60 0 500\n4 90 95 75 95 10\n4 90 95 75 95 11\n5 0 0 0 0 0 333",
      "output": "2\n8\n2\n3\n4"
    }
  ],
  "paper": [
    {
      "input": "10 8\n3\n0 3\n1 4\n0 2",
      "output": "30"
    }
  ],
  "ncross": [
    {
      "input": "10\n3 5 4 7\n1 7 2 8\n2 4 2 7\n2 6 4 4\n1 5 3 3",
      "output": "4\n3"
    }
  ],
  "two_dim(open)": [
    {
      "input": "50 -2 47 14 18 93 -70 -73 88 -9 17 100",
      "output": "50 -2 47 14\n18 93 -70 -73\n88 -9 17 100\n50 18 88\n-2 93 -9\n47 -70 17\n14 -73 100"
    }
  ],
  "ddm": [
    {
      "input": "8 1 1 1 1\n1 8 1 1 1\n1 1 8 1 1\n1 1 1 8 1\n-9 1 1 1 8",
      "output": "no"
    }
  ],
  "offset(open)": [
    {
      "input": "3 4 1 4 9\n2 9 4 5 8\n9 0 8 2 1\n7 0 2 8 4\n2 7 2 1 4",
      "output": "3 4 * 4 9\n* 9 4 5 8\n9 0 8 2 *\n7 0 2 8 4\n* 7 2 * 4"
    }
  ],
  "sum_rule": [
    {
      "input": "3 4",
      "output": "1 1 1 1\n1 2 3 4\n1 3 6 10"
    }
  ],
  "top(open)": [
    {
      "input": "2\n10 3\n8 6 1\n5 7 9 4",
      "output": "161"
    }
  ],
  "lab": [
    {
      "input": "4\n0 0 3 2\n3 0 3 1\n2 2 0 2\n3 3 3 0",
      "output": "4"
    }
  ],
  "plibrary": [
    {
      "input": "3 3\n1 1 1\n0 1 1\n1 1 1\n7 2\n1 0 1 0 1 0 1\n0 1 0 1 0 1 0",
      "output": "yes\nno"
    }
  ],
  "block": [
    {
      "input": "8 1 8| 7 9 3| 8 4 8",
      "output": "6 9 8| 2 5 4| 7 6 2\n3 4 2| 8 3 6| 9 2 5\n-----|------|-------\n7 5 5| 9 4 1| 8 2 5\n2 3 7| 5 3 8| 9 1 5\n3 8 6| 1 6 3| 1 6 2\n-----|------|-------\n5 2 4| 1 1 4| 6 9 2\n7 8 2| 8 1 7| 4 7 9\n7 6 9| 9 4 9| 6 3 8"
    }
  ],
  "block_max": [
    {
      "input": "8 1 8| 7 9 3| 8 4 8",
      "output": "6 9 8| 2 5 4| 7 6 2\n3 4 2| 8 3 6| 9 2 5\n-----|------|-------\n7 5 5| 9 4 1| 8 2 5\n2 3 7| 5 3 8| 9 1 5\n3 8 6| 1 6 3| 1 6 2\n-----|------|-------\n5 2 4| 1 1 4| 6 9 2\n7 8 2| 8 1 7| 4 7 9\n7 6 9| 9 4 9| 6 3 8"
    }
  ],
  "ball(open)": [
    {
      "input": "3 1 4",
      "output": "2 6\n5\n---\n3 1\n2 4\n6\n---\n3\n2 1\n4\n---\n3 1\n2\n---\n1\n3\n---\n1"
    }
  ],
  "aja(open)": [
    {
      "input": "1 7 0 8 1 0 0 0 6 9\n7 1 1 7 5 1 7 8 0 4\n3 7 1 2 0 5 1 9 4 8\n6 7 5 5 9 0 3 8 9 7\n2 1 2 1 4 5 4 0 5 7\n4 8 6 4 1 9 9 8 3 5\n1 3 1 1 9 2 3 6 9 5\n5 1 6 4 9 4 4 4 2 2\n4 7 4 9 6 3 1 9 4 3\n3 4 1 6 5 2 9 2 1 7",
      "output": "35"
    }
  ],
  "wrap(open)": [
    {
      "input": "1 7 0 8 1 0 0 0 6 9\n7 1 1 7 5 1 7 8 0 4\n3 7 1 2 0 5 1 9 4 8\n6 7 5 5 9 0 3 8 9 7\n2 1 2 1 4 5 4 0 5 7\n4 8 6 4 1 9 9 8 3 5\n1 3 1 1 9 2 3 6 9 5\n5 1 6 4 9 4 4 4 2 2\n4 7 4 9 6 3 1 9 4 3\n3 4 1 6 5 2 9 2 1 7",
      "output": "37"
    }
  ],
  "magic": [
    {
      "input": "3",
      "output": "8  1  6\n3  5  7\n4  9  2"
    }
  ],
  "pascal_tri": [
    {
      "input": "1",
      "output": "1 1\n1 2 1\n1 3 3 1"
    }
  ],
  "parkside": [
    {
      "input": "5 3",
      "output": "3 4 6 9 4\n5 7 1 5\n8 2 6\n3 7\n8"
    }
  ],
  "leeside": [
    {
      "input": "5 *",
      "output": "6"
    }
  ],
  "spiral": [
    {
      "input": "3",
      "output": "1    2    3\n8    9    4\n7    6    5"
    }
  ],
  "rect": [
    {
      "input": "다음의 예를 고려해 보자.\n1 2 4 4\n2 3 5 7\n3 1 6 5\n7 3 8 6",
      "output": "이 경우의 입출력은 다음과 같다.\n26"
    }
  ],
  "bomb_game": [
    {
      "input": "5 5 3\n3 3 3 1\n3 4 1 0\n3 4 3 1",
      "output": "5"
    }
  ],
  "corn_field": [
    {
      "input": "5 3 1          ----- N , B , K",
      "output": "5 1 2 6 3\n1 3 5 2 7\n7 2 4 6 1\n9 9 8 6 5\n0 6 9 3 9\n1 2           ---- 1 행 2 열에서 3*3 크기의 부행렬에서 최대/최소 차"
    }
  ],
  "parity": [
    {
      "input": "1 0 1 0",
      "output": "0 0 0 0\n1 1 1 1\n0 1 0 1"
    }
  ],
  "bingo": [
    {
      "input": "11 12 2 24 10\n16 1 13 3 25\n6 20 5 21 17\n19 4 8 14 9\n22 15 7 23 18\n5 10 7 16 2\n4 22 8 17 13\n3 18 1 6 25\n12 19 23 14 21\n11 24 9 20 15",
      "output": "15"
    }
  ],
  "fishing (special judge)": [
    {
      "input": "-34 39 16 40 18\n46 20 49 -2 -47\n-47 -5 -4 49 -33\n-11 -14 45 42 -9\n18 25 -27 48 39",
      "output": "321\n1 2 5 4"
    }
  ],
  "tableII(open)": [
    {
      "input": "2 1 3 5 0 2 7 3 1 1 5 6 2 3 3 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n10 49 22 33 24 54 67 56 9 43 5 65 71 11 21 32",
      "output": "27\n102\n320"
    }
  ],
  "wireless": [
    {
      "input": "3\n5\n3\n1 3 2 5\n3 1 2 7\n5 1 1 5",
      "output": "12\n5"
    }
  ],
  "meteorite": [
    {
      "input": "3 1 2 4",
      "output": "4 7 6 2\n5 2 3 1\n9 6 4 8"
    }
  ],
  "rcq": [
    {
      "input": "7\n6 2 9 8 3 4 7\n3\n1 1\n1 2\n3 7",
      "output": "6\n2\n7"
    }
  ],
  "hap": [
    {
      "input": "1 2 3 4",
      "output": "10"
    }
  ],
  "radd": [
    {
      "input": "12 345",
      "output": "465"
    }
  ],
  "rev": [],
  "mgcd": [
    {
      "input": "4\n8 16 80 20",
      "output": "4"
    }
  ],
  "goldbach": [
    {
      "input": "8 = 3 + 5. Both 3 and 5 are odd prime numbers.",
      "output": "20 = 3 + 17 = 7 + 13.\n42 = 5 + 37 = 11 + 31 = 13 + 29 = 19 + 23."
    }
  ],
  "tencard(open)": [
    {
      "input": "2 1 1 2",
      "output": "10"
    }
  ],
  "self_num": [],
  "friday": [
    {
      "input": "20",
      "output": "36 33 34 33 35 35 34"
    }
  ],
  "cryption": [
    {
      "input": "* * * ( 세 자리 수)",
      "output": "x    * * ( 두 자리 수)\n-------\n* * * ( 세 자리 수)\n* * *   ( 세 자리 수)\n-------\n* * * * ( 네 자리 수)"
    }
  ],
  "chinese(open)": [
    {
      "input": "3 4 5\n1 2 3",
      "output": "58"
    }
  ],
  "dual_palindrome": [
    {
      "input": "3 25",
      "output": "26\n27\n28"
    }
  ],
  "bpalin(open)": [],
  "prime_palin": [
    {
      "input": "5 500",
      "output": "5\n7\n11\n101\n131\n151\n181\n191\n313\n353\n373\n383"
    }
  ],
  "powerofx": [
    {
      "input": "2 10",
      "output": "1024"
    }
  ],
  "euclid": [
    {
      "input": "8 12",
      "output": "4 24"
    }
  ],
  "upstair": [
    {
      "input": "4",
      "output": "5"
    }
  ],
  "sfn": [],
  "tobin": [
    {
      "input": "10\n11",
      "output": "1010\n1011"
    }
  ],
  "mt(open)": [
    {
      "input": "3",
      "output": "12321"
    }
  ],
  "pTp(open)": [
    {
      "input": "1\n2\n3\n4\n5",
      "output": "1\n121\n1213121\n121312141213121\n1213121412131215121312141213121"
    }
  ],
  "athletic": [
    {
      "input": "3",
      "output": "ooo\nooxo\nooxxo\noxoo\noxoxo\noxxoo\nxooo\nxooxo\nxoxoo\nxxooo\ntotal 10 case(s)"
    }
  ],
  "point(open)": [
    {
      "input": "-1 -2\n3 4",
      "output": "3"
    }
  ],
  "ccc_chances": [
    {
      "input": "3\n3\n1 3 7 5\n3 4 0 8\n2 4 2 2\n3\n4\n1 3 5 7\n3 4 8 0\n2 4 2 2\n1 2 5 5",
      "output": "0\n9"
    }
  ],
  "dance": [
    {
      "input": "1   2   3   4   5   6  |  7   8   9   10   11 ... 이 경우 반을 나눌수 없으므로 앞무리 6마리 뒷무리 5마리",
      "output": "1   2   3 | 4   5   6\n1   2 | 3\n1   2        => 1*2=2  총합 2\n3     => 3 번 집으로\n4   5 |  6\n4  5        => 4*5=20  총합 22\n6  => 6 번 집으로\n7   8   9  | 10  11\n7   8 | 9\n7   8        => 7*8=56  총합 78\n9    => 9 번 집으로\n10  11   => 10*11=110 총합 188"
    }
  ],
  "secure": [
    {
      "input": "4 6\na t c i s w",
      "output": "acis\nacit\naciw\nacst\nacsw\nactw\naist\naisw\naitw\nastw\ncist\ncisw\ncitw\nistw"
    }
  ],
  "order": [
    {
      "input": "4 2\n5 5",
      "output": "BC\nBD"
    }
  ],
  "omok": [
    {
      "input": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 1 2 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0\n0 0 1 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 1 2 2 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
      "output": "1\n3 2"
    }
  ],
  "robot": [
    {
      "input": "3 6 5\nNEESWE\nWWWESS\nSNWWWW\n4 5 1\nSESWE\nEESNW\nNWEEN\nEWSEN",
      "output": "10 step(s) to exit\n3 step(s) before a loop of 8 step(s)"
    }
  ],
  "necklace": [
    {
      "input": "1 2                               1 2",
      "output": "r b b r                           b r r b\nr         b                       b         b\nr           r                     b           r\nr             r                   w             r\nb               r                 w               w\nb                 b               r                 r\nb                 b               b                 b\nb                 b               r                 b\nr               r                 b               r\nb             r                   r             r\nb           r                     r           r\nr       r                         r       b\nr b r                             r r w\n그림. A                           그림. B\nr 빨간 구슬\nb 파란 구슬\nw 흰 구슬"
    }
  ],
  "agent(open)": [
    {
      "input": "4\n2 3 1 4\n4\n4 4 4 4\n4\n2 1 4 3",
      "output": "3\n-1\n1"
    }
  ],
  "permutation": [
    {
      "input": "요약하면 ,",
      "output": "p1: 주어진 순열\n1 2 3 4 5\n----------\n4 1 5 2 3\np2: 2 번을 접근 후의 순열\n1 2 3 4 5\n---------\n2 4 3 1 5\np3: 3 번을 접근 후의 순열\n1 2 3 4 5\n---------\n1 2 5 4 3\n...\npn: n 번 접근 후의 순열\n1 2 3 4 5\n---------\n1 2 3 4 5\n최소  n 을  구하는 게 문제"
    }
  ],
  "hanoi": [
    {
      "input": "3",
      "output": "1 -> 3\n1 -> 2\n3 -> 2\n1 -> 3\n2 -> 1\n2 -> 3\n1 -> 3"
    }
  ],
  "dna": [
    {
      "input": "GATTA + TACA -> GATTACA",
      "output": "TACA + GATTA -> TACAGATTA\nTACA + ACA -> TACA\nTAC + TACA -> TACA\nATAC + TACA -> ATACA\nTACA + ACAT -> TACAT"
    }
  ],
  "fractal": [
    {
      "input": "/\\",
      "output": "/__\\"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nvoid quick(int low,int high)\n{\n    int pivotindex;\n     if (low < high){\n        partition(low,high,&pivotindex);\n        quick(low,pivotindex-1);\n        quick(pivotindex+1,high);\n    }\n}": [
    {
      "input": "차례",
      "output": "1. partition 방법\n2. quick sort 구현\n3. 왜 quick 인가?\n4. library 로 구현하기\n5. 분석"
    }
  ],
  "guessing_game": [
    {
      "input": "10\ntoo high\n3\ntoo low\n4\ntoo high\n2\nright on\n5\ntoo low\n7\ntoo high\n6\nright on",
      "output": "Stan is dishonest\nStan may be honest"
    }
  ],
  "sort": [
    {
      "input": "9\n2\n2\n1\n3\n3\n3\n2\n3\n1",
      "output": "4"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n#include <stdio.h>\n#include <stdlib.h>\n#include <search.h>\n int cmp(const void *va,const void *vb)\n{\n   int *p,*q;\n    p = (int*)va;\n   q = (int*)vb;\n    return *p - *q;\n}\n int main()\n{\n   int ia[]={2,4,6,8,10};\n   int key=8;\n   int *p;\n    //bsearch(찾을데이터, 배열의시작주소,배열개수,한배열의바이트수,함수포인터)\n   //찾고자 하는 데이터가 존재하면 해당데이터의 실제 주소 \n   //없으면 NULL\n    p =(int*) bsearch(&key,ia,5,sizeof(int),cmp );\n    if ( p ) {\n      printf(\"found in %dth\\n\", p - ia);\n   }else {\n      printf(\"not found...\\n\");\n   }\n    return 0;\n}": [],
  "bsearch": [
    {
      "input": "5\n2 4 6 8 10\n4\n5\n2 4 6 8 10\n5",
      "output": "2\nnot found"
    }
  ],
  "notes": [
    {
      "input": "악보     1   1   2   3   3   3",
      "output": "+---+---+---+---+---+---+\n시각     0   1   2   3   4   5"
    }
  ],
  "measure": [
    {
      "input": "10\n2 7\n5 4\n10 3",
      "output": "3.5"
    }
  ],
  "binary_search": [
    {
      "input": "10 3",
      "output": "4\n12 12\n17 18\n29 30\n87 94"
    }
  ],
  "fact_pow": [
    {
      "input": "3\n2\n3\n4",
      "output": "4\n7\n9"
    }
  ],
  "이 방법은 초등 수학에 나오는 문제 푸는 방법 찾기에서 거꾸로 생각하기와 비슷한 것 같습니다.": [
    {
      "input": "10 을 이항하면",
      "output": "2*x <= 16\nx <= 8"
    }
  ],
  "subsequence": [
    {
      "input": "10 15\n5 1 3 5 10 7 4 9 2 8\n5 11\n1 2 3 4 5",
      "output": "2\n3"
    }
  ],
  "drying": [
    {
      "input": "3\n2 3 9\n5\n3\n2 3 6\n5",
      "output": "3\n2"
    }
  ],
  "aggressive": [
    {
      "input": "5 3\n1\n2\n8\n4\n9",
      "output": "3"
    }
  ],
  "k_best": [
    {
      "input": "3 2\n1 1\n1 2\n1 3",
      "output": "1 2"
    }
  ],
  "crossed_ladder(open)": [
    {
      "input": "30 40 10\n12.619429 8.163332 3\n10 10 3\n10 10 1",
      "output": "26.033\n7.000\n8.000\n9.798"
    }
  ],
  "josephus": [
    {
      "input": "8 2 3",
      "output": "2 5 8 4 1 7 3 6"
    }
  ],
  "long_sub": [
    {
      "input": "521732147023\n218072345632843258023",
      "output": "-218072345111111111000"
    }
  ],
  "long_mul": [
    {
      "input": "123456789\n3456789012345",
      "output": "426764071714595060205"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n#include < stdio.h >\n  int fact[100000]={1};\n int main()\n{\n   int i,f,last = 1;\n   int mok,n;\n       scanf(\"%d\",&n);\n    for( f = 1 ; f <= n; f++){\n      mok = 0;\n      for( i = 0 ; i < last ;i++){\n         fact[i] = fact[i]*f + mok;\n         mok = fact[i] / 10;\n         fact[i] = fact[i] % 10;\n      }\n             for( ; mok != 0 ; last++ ){\n         fact[last] = mok % 10;\n         mok /= 10;\n      }\n   }\n     for( i = last -1 ; i >= 0 ; i--){\n      printf(\"%d\",fact[i]);\n   }\n    printf(\"\\n\");\n    }": [],
  "two": [
    {
      "input": "100",
      "output": "1267650600228229401496703205376"
    }
  ],
  "factorial(open)": [
    {
      "input": "10\n30\n50\n100",
      "output": "3628800\n265252859812191058636308480000000\n30414093201713378043612608166064768844377641568960512000000000000\n93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"
    }
  ],
  "frequency": [
    {
      "input": "1\n5\n10",
      "output": "1! --\n(0)    0    (1)    1    (2)    0    (3)    0    (4)    0\n(5)    0    (6)    0    (7)    0    (8)    0    (9)    0\n5! --\n(0)    1    (1)    1    (2)    1    (3)    0    (4)    0\n(5)    0    (6)    0    (7)    0    (8)    0    (9)    0\n10! --\n(0)    2    (1)    0    (2)    1    (3)    1    (4)    0\n(5)    0    (6)    1    (7)    0    (8)    2    (9)    0"
    }
  ],
  "nummobile": [
    {
      "input": "2\n142857\n142856",
      "output": "YES\nNO"
    }
  ],
  "HQ9(open)": [
    {
      "input": "qQqQqQqQ\n9hhq",
      "output": "qQqQqQqQ\nqQqQqQqQ\nqQqQqQqQ\nqQqQqQqQ\nqQqQqQqQ\nqQqQqQqQ\nqQqQqQqQ\nqQqQqQqQ\n99 Bottles of Beer on the Wall\nHello, world!\nHello, world!\n9hhq"
    }
  ],
  "differential": [
    {
      "input": "1 1",
      "output": "1"
    }
  ],
  "chemi(open)": [
    {
      "input": "input",
      "output": "zepelepenapa papapripikapa\noutput\nzelena paprika\ninput\nbapas jepe doposapadnapa opovapa kepemipijapa\noutput\nbas je dosadna ova kemija"
    }
  ],
  "coci_trik": [
    {
      "input": "input",
      "output": "AB\noutput\n3\ninput\nCBABCACCC\noutput\n1"
    }
  ],
  "comma(open)": [
    {
      "input": "1234",
      "output": "1,234"
    }
  ],
  "coci_abc(open)": [
    {
      "input": "1 5 3\nABC\n6 4 2\nCAB",
      "output": "1 3 5\n6 2 4"
    }
  ],
  "mulofele": [
    {
      "input": "121",
      "output": "yes"
    }
  ],
  "octal(open)": [
    {
      "input": "1010\n11001100",
      "output": "12\n314"
    }
  ],
  "worldcup(open)": [
    {
      "input": "3 3\nBrasil 3\nAustralia 3\nCroacia 3\n3 3\nBrasil 5\nJapao 1\nAustralia 1",
      "output": "0\n2"
    }
  ],
  "pandigital(open)": [
    {
      "input": "4123",
      "output": "yes"
    }
  ],
  "counting_black": [
    {
      "input": "1. WHITE  x, y, L     // 보드판의 격자에 흰색을 칠한다.",
      "output": "// x,y 는 왼쪽 위이고\n// 오른쪽 아래는  (x+L-1, y+L-1)\n2. BLACK  x, y, L     // 보드판의 격자에 검은색을 칠한다.\n// x,y 는 왼쪽 위이고\n// 오른쪽 아래는  (x+L-1, y+L-1)\n3. TEST     x, y, L   // 검은색의 격자의 수를 출력한다.\n// 범위는  (x, y) - (x+L-1, y+L-1)"
    }
  ],
  "blur": [
    {
      "input": "START 2 2\n00\n00\nEND\nSTART 2 9\n012345678\n012345678\nEND\nSTART 4 4\n4440\n4400\n4000\n0000\nEND\nSTART 9 9\n900000009\n090000090\n009000900\n000909000\n000090000\n000909000\n009000900\n090000090\n900000009\nEND",
      "output": "0\n01234567\n431\n310\n100\n42000024\n24200242\n02422420\n00244200\n00244200\n02422420\n24200242\n42000024"
    }
  ],
  "treasure_hunt(open)": [
    {
      "input": "5 5\n3\n5 E\n2 N\n3 N",
      "output": "Treasure Found"
    }
  ],
  "ride(open)": [
    {
      "input": "COMETQ\nHVNGAT\nABSTAR\nUSACO",
      "output": "GO\nSTAY"
    }
  ],
  "bouncy": [
    {
      "input": "12333\n3333\n54392\n0",
      "output": "no bouncy\nno bouncy\nbouncy"
    }
  ],
  "radix": [
    {
      "input": "32 16",
      "output": "20"
    }
  ],
  "foo": [
    {
      "input": "FOOK\nFOOOOOPLE",
      "output": "OOFK\nOOOOFOPLE"
    }
  ],
  "todec(open)": [
    {
      "input": "0011\n1100",
      "output": "3\n12"
    }
  ],
  "n_to_k_system": [
    {
      "input": "10010\n2 10\n17A8BEHP4\n28 17",
      "output": "18\n406GB9BB0C"
    }
  ],
  "keyboard(open)": [
    {
      "input": "2\nX 2 6\nY 4 9\n3\nA 1 5\nB 4 8\nC 9 10",
      "output": "AABBAAA\nAAABAAAA"
    }
  ],
  "allinall(open)": [
    {
      "input": "sequence subsequence\nperson compression\nVERDI vivaVittorioEmanueleReDiItalia\ncaseDoesMatter CaseDoesMatter",
      "output": "Yes\nNo\nYes\nNo"
    }
  ],
  "ladder": [
    {
      "input": "4 5\n1\n2\n3\n1\n2",
      "output": "1 D\n2 C\n3 A\n4 B"
    }
  ],
  "sumofline(open)": [
    {
      "input": "3\n1 2 3 10\n100 99 1\n8",
      "output": "16\n200\n8"
    }
  ],
  "lookandsay": [
    {
      "input": "122344111\n1111111111\n12345",
      "output": "1122132431\n101\n1112131415"
    }
  ],
  "clay": [],
  "gift_giver": [
    {
      "input": "5\ndave\nlaura\nowen\nvick\namr\ndave\n200 3\nlaura\nowen\nvick\nowen\n500 1\ndave\namr\n150 2\nvick\nowen\nlaura\n0 2\namr\nvick\nvick\n0 0",
      "output": "dave 302\nlaura 66\nowen -359\nvick 141\namr -150\n참고\ndave 가 가진 최초 돈이 200 이고 , 3 명에게 최대로 균등하게 나누어 줄 수 있는 금액은 66 이고 남는 돈은 2\ndave laura owen vick amr\n최초 금액 200\n최종 금액 2 66 66 66\nowen 이 최초 가진 돈이 500 이고 , dave 에게 주는 경우 가진 돈 500 을 모두 주는 경우이므로\ndave laura owen vick amr\n최초 금액 200   500\n최종 금액 2\n+ 500 66 66 66\namr 이 150 으로 2 사람 owen 과 vick 에게 75 만큼 나누어주면 되므로\ndave laura owen vick amr\n최초 금액 200   500   150\n최종 금액 2\n+ 500 66 66\n+75 66\n+75\n...."
    }
  ],
  "hard_to_believe(open)": [
    {
      "input": "73+42=16\n5+8=13\n10+20=30\n0001000+000200=00030\n1234+5=1239\n1+0=0\n7000+8000=51",
      "output": "True\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue"
    }
  ],
  "unreliable_msg(open)": [
    {
      "input": "AJMP\naB23d\nCP\nrTurnAGundam1isdefferentf",
      "output": "32Bad\nTurnAGundam0isdefferentfr"
    }
  ],
  "secret": [
    {
      "input": "A    000000",
      "output": "B    001111\nC    010011\nD    011100\nE    100110\nF    101001\nG    110101\nH    111010"
    }
  ],
  "to_and_fro": [
    {
      "input": "t o i o y",
      "output": "h p k n n\ne l e a i\nr a h s g\ne c o n h\ns e m o t\nn l e w x"
    }
  ],
  "crypt": [
    {
      "input": "eydbkmiqugjxlvtzpnwohracsf\nKifq oua zarxa suar bti yaagrj fa xtfgrj",
      "output": "Jump the fence when you seeing me coming"
    }
  ],
  "pstring": [
    {
      "input": "abcd\naaaa\nababab",
      "output": "1\n4\n3"
    }
  ],
  "fa": [
    {
      "input": "aabzza",
      "output": "a:3\nb:1\nc:0\nd:0\n.\n.\n.\nz:2"
    }
  ],
  "ip_address": [
    {
      "input": "00000000000000000000000000000000\n00000011100000001111111111111111\n11001011100001001110010110000000\n01010000000100000000000000000001",
      "output": "0.0.0.0\n3.128.255.255\n203.132.229.128\n80.16.0.1"
    }
  ],
  "histogram": [
    {
      "input": "THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.\nTHIS IS AN EXAMPLE TO TEST FOR YOUR\nHISTOGRAM PROGRAM.\nHELLO!",
      "output": "*\n*\n*                   *\n*                   *     *   *\n*                   *     *   *\n*       *     *             *     *   *\n*       *     * *     * *   *     * * *\n*       *   * * *     * *   * *   * * * *\n*     * * * * * *     * * * * *   * * * *     * *\n* * * * * * * * * * * * * * * * * * * * * * * * * *\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z"
    }
  ],
  "reverse(open)": [
    {
      "input": "a   bc  d",
      "output": "dcba"
    }
  ],
  "esrever(open)": [
    {
      "input": "I like spring.",
      "output": "I ekil .gnirps"
    }
  ],
  "number_guessing": [
    {
      "input": "5204 4902\n0123 3210",
      "output": "1A2B\n0A4B"
    }
  ],
  "mine": [
    {
      "input": "3\n..*\n*..\n.*.\nxx.\n.x.\nx..\n3\n..*\n*..\n.*.\nxxx\n.x.\nx..",
      "output": "12.\n.3.\n2..\n12*\n*3.\n2*."
    }
  ],
  "birth(open)": [
    {
      "input": "2003 5 25",
      "output": "sunday"
    }
  ],
  "fractodec": [
    {
      "input": "45 56",
      "output": "0.803(571428)"
    }
  ],
  "isbn": [
    {
      "input": "15688?111X",
      "output": "1"
    }
  ],
  "surface": [
    {
      "input": "4  행  ... 각 25 열",
      "output": "XXXX                XXXXX\nXXX               XXXXXXX\nXXXXX                XXXX\nXX                 XXXXXX"
    }
  ],
  "namenum": [
    {
      "input": "2: A,B,C     5: J,K,L    8: T,U,V",
      "output": "3: D,E,F     6: M,N,O    9: W,X,Y\n4: G,H,I     7: P,R,S"
    }
  ],
  "contest": [
    {
      "input": "4\nStars 2 20 5 0 4 190 3 220\nRockets 5 180 1 0 2 0 3 100\nPenguins 1 15 3 120 1 300 4 0\nMarsupials 9 0 3 100 2 220 3 80",
      "output": "Penguins 3 475"
    }
  ],
  "numeral_system(open)": [
    {
      "input": "10\nxi x9i\ni 9i\nc2x2i 4c8x8i\nm2ci 4m7c9x8i\n9c9x9i i\ni 9m9c9x8i\nm i\ni m\nm9i i\n9m8c7xi c2x8i",
      "output": "3x\nx\n6cx\n5m9c9x9i\nm\n9m9c9x9i\nmi\nmi\nmx\n9m9c9x9i"
    }
  ],
  "mass": [
    {
      "input": "C\nC6H5OH\nNH2CH2COOH\nC12H22O11",
      "output": "12.010\n94.108\n75.070\n342.296"
    }
  ],
  "similar": [
    {
      "input": "4\nDOG\nGOD\nGOOD\nDOLL",
      "output": "2"
    }
  ],
  "equations": [
    {
      "input": "7\n2x + 3y = x\n5 = x + y + 3\n2x + 3y = 0\n10x = -15y\n2x + 3y = 0\n10x = -15y + 1\nx = 1\n3x = 6y\n2x = 3x + -x + y\nx + y = x + y\n2x = -3\n-2y = 3\n1 = 2\nx = 3",
      "output": "3\n-1\ndon't know\ndon't know\ndon't know\ndon't know\n1\n1/2\ndon't know\n0\n-3/2\n-3/2\ndon't know\ndon't know"
    }
  ],
  "rdigit": [
    {
      "input": "2\nXII MDL\n4\nI I I\nI\n0",
      "output": "Case I: MDLXII\nCase II: IV"
    }
  ],
  "fibos(open)": [
    {
      "input": "6\na\nba\n7\nspock\nkirk",
      "output": "a\nba\naba\nbaaba\nababaaba\nbaabaababaaba\nspock\nkirk\nspockkirk\nkirkspockkirk\nspockkirkkirkspockkirk\nkirkspockkirkspockkirkkirkspockkirk\nspockkirkkirkspockkirkkirkspockkirkspockkirkkirkspockkirk"
    }
  ],
  "scramble(open)": [
    {
      "input": "0.\nbanana, strawberry, OrAnGe.\nBanana, StRaWbErRy, orange.\n10, 8, 6, 4, 2, 0.\nx, 30, -20, z, 1000, 1, Y.\n50, 7, kitten, puppy, 2, orangutan, 52, -100, bird, worm, 7, beetle.\n.",
      "output": "0.\nbanana, OrAnGe, strawberry.\nBanana, orange, StRaWbErRy.\n0, 2, 4, 6, 8, 10.\nx, -20, 1, Y, 30, 1000, z.\n-100, 2, beetle, bird, 7, kitten, 7, 50, orangutan, puppy, 52, worm."
    }
  ],
  "word": [],
  "calfflac": [
    {
      "input": "Confucius say: Madam, I'm Adam.",
      "output": "11\nMadam, I'm Adam"
    }
  ],
  "moslea(open)": [
    {
      "input": "1\naabccc",
      "output": "1"
    }
  ],
  "hashing(open)": [
    {
      "input": "12$34567$890\n513$27658$13",
      "output": "34686\n28004"
    }
  ],
  "suffix_array(open)": [],
  "dovelet": [],
  "strcmp(open,special judge)": [
    {
      "input": "abc\nad\nabc\nabc\nabc\nabcd",
      "output": "-3\n0\n-5"
    }
  ],
  "strchr(open)": [
    {
      "input": "실주소",
      "output": "'t'   100\n'u'   101\n'r'   102\n'b'   103\n'o'   104\n'\\0'  105"
    }
  ],
  "delspace(open)": [
    {
      "input": "tur   b o",
      "output": "turbo"
    }
  ],
  "match": [
    {
      "input": "(a*(b+c)+d)",
      "output": "3 7\n0 10"
    }
  ],
  "dish(open)": [
    {
      "input": "bacd\ndabc",
      "output": "push\npush\npop\npop\npush\npop\npush\npop\nimpossible"
    }
  ],
  "rails": [
    {
      "input": "3\n1 2 3\n3 2 1\n3 1 2\n1 3 2\n0",
      "output": "Yes\nYes\nNo\nYes"
    }
  ],
  "catalan": [
    {
      "input": "4\n2 1 4 3",
      "output": "YES"
    }
  ],
  "bhd": [
    {
      "input": "6\n10\n3\n7\n4\n12\n2",
      "output": "5"
    }
  ],
  "paren": [
    {
      "input": "(()[[]])([])\n[][]((])",
      "output": "28\n0"
    }
  ],
  "tw": [
    {
      "input": "5\n6 9 5 7 4",
      "output": "0 0 2 2 4"
    }
  ],
  "rectangle": [
    {
      "input": "7 2 1 4 5 1 3 3\n4 1000 1000 1000 1000",
      "output": "8\n4000"
    }
  ],
  "prefix_calc": [
    {
      "input": "+42",
      "output": "6"
    }
  ],
  "calc": [
    {
      "input": "(3+5)*(5-2)",
      "output": "24"
    }
  ],
  "calc2": [
    {
      "input": "15*(6/2)",
      "output": "45"
    }
  ],
  "catch_cow": [
    {
      "input": "5 17",
      "output": "4"
    }
  ],
  "prime_path": [
    {
      "input": "1033 8179\n1373 8017\n1033 1033",
      "output": "6\n7\n0"
    }
  ],
  "dam(open)": [
    {
      "input": "5\n0 1 0 0 1\n0 0 0 0 0\n1 1 1 0 1\n0 0 0 0 0\n1 0 1 0 1\n1 1\n5\n5\n0 0 1 0 0\n0 0 0 0 0\n1 1 1 0 0\n0 0 1 1 0\n0 0 0 0 0\n5 2\n3",
      "output": "3\n2"
    }
  ],
  "ccc_taller": [
    {
      "input": "10 3\n8 4\n3 8\n4 2\n3 2\n10 3\n3 8\n2 8\n3 4\n3 2",
      "output": "yes\nunknown"
    }
  ],
  "horse_knight": [
    {
      "input": "4 2\n1 0 0 0\n0 0 0 0\n0 0 1 0\n0 0 0 0\n2 3",
      "output": "9"
    }
  ],
  "binary_tree": [
    {
      "input": "3\n42 1\n3 4\n17 73",
      "output": "Scenario #1:\n41 0\nScenario #2:\n2 1\nScenario #3:\n4 6"
    }
  ],
  "nca": [
    {
      "input": "16\n1 14\n8 5\n10 16\n5 9\n4 6\n8 4\n4 10\n1 13\n6 15\n10 11\n6 7\n10 2\n16 3\n8 1\n16 12\n16 7\n5\n2 3\n3 4\n3 1\n1 5\n3 5",
      "output": "4\n3"
    }
  ],
  "treeornot": [
    {
      "input": "6 8  5 3  5 2  6 4\n5 6  0 0\n8 1  7 3  6 2  8 9  7 5\n7 4  7 8  7 6  0 0\n3 8  6 8  6 4\n5 3  5 6  5 2  0 0",
      "output": "tree\ntree\nnot a tree"
    }
  ],
  "postorder": [
    {
      "input": "5 3 11 7 -1 -1 2 -1 -1 -1 8 13 -1 -1 4 -1 1 -1 -1",
      "output": "7 2 11 3 13 1 4 8 5"
    }
  ],
  "traverse": [
    {
      "input": "DBHEIAFCJGK\nABDEHICFGJK",
      "output": "DHIEBFJKGCA"
    }
  ],
  "depth": [
    {
      "input": "1 2 4 7 -1 -1 8 -1 -1 -1 3 5 -1 -1 6 -1 -1",
      "output": "3\n4"
    }
  ],
  "width": [
    {
      "input": "19\n1 2 3\n2 4 5\n3 6 7\n4 8 -1\n5 9 10\n6 11 12\n7 13 -1\n8 -1 -1\n9 14 15\n10 -1 -1\n11 16 -1\n12 -1 -1\n13 17 -1\n14 -1 -1\n15 18 -1\n16 -1 -1\n17 -1 19\n18 -1 -1\n19 -1 -1",
      "output": "3 18"
    }
  ],
  "max_heap": [
    {
      "input": "4",
      "output": "3"
    }
  ],
  "labyrinth": [
    {
      "input": "3 3\n###\n#.#\n###\n7 6\n#######\n#.#.###\n#.#.###\n#.#.#.#\n#.....#\n#######",
      "output": "Maximum rope length is 0.\nMaximum rope length is 8."
    }
  ],
  "optimal_bst": [],
  "huffman": [
    {
      "input": "3\n3\n2\n10011\n4\n2\n000111010\n19\n10\n01234678950515253545556575859",
      "output": "0->10\n1->0\n2->11\n0->00\n1->011\n2->1\n3->010\n0->0\n1->1\n2->2\n3->3\n4->4\n5->6\n6->7\n7->8\n8->9\n9->50\n10->51\n11->52\n12->53\n13->54\n14->55\n15->56\n16->57\n17->58\n18->59"
    }
  ],
  "이진 트라이 라 읽고 , retrieval(검색)의 reTRIEval": [],
  "morse": [
    {
      "input": "1\n.---.--.-.-.-.---...-.---.\n6\nAT\nTACK\nTICK\nATTACK\nDAWN\nDUSK",
      "output": "2"
    }
  ],
  "phone_list": [
    {
      "input": "Emergency 911",
      "output": "Alice 97 625 999\nBob 91 12 54 26"
    }
  ],
  "secret_message": [
    {
      "input": "4 5\n3 0 1 0\n1 1\n3 1 0 0\n3 1 1 0\n1 0\n1 1\n2 0 1\n5 0 1 0 0 1\n2 1 1",
      "output": "1\n3\n1\n1\n2"
    }
  ],
  "coci_obilazak": [
    {
      "input": "input",
      "output": "2\n2 1 3\noutput\n1\n2 3\ninput\n3\n1 6 4 3 5 2 7\noutput\n3\n6 2\n1 4 5 7\nClarification of the first and second example: The examples correspond to the images in the task."
    }
  ],
  "written by victor5432": [
    {
      "input": "<문제>\n4\n2 4 6 8\n4\n0 0 2\n0 1 2\n1 3 1\n0 0 3",
      "output": "당신은 새로운 계산기 M_Int를 만들려고 한다. 당신은 M_Int에 다음과 같은 기능을 갖게 하려고 한다.\n1. 처음에 n과 n개의 수 a[0]~a[n-1]가 입력된다. (n<=100000, n개의 수는 int범위)\n2. 명령 개수 T가 입력된다. (T<=100000)\n3. 0 x y가 들어오면 a[x]~a[y]의 최솟값을 출력한다.\n4. 1 x y가 들어오면 a[x]를 y로 고친다.\nM_Int를 구현해보아라. 단, M_Int는 제한 범위 내에 있는 어떤 데이터라도 1초 안에 계산되어야한다.\n2\n4\n1"
    }
  ],
  "rmq": [
    {
      "input": "7\n6 2 9 8 3 4 7\n3\n1 1\n1 2\n3 7",
      "output": "6\n2\n3"
    }
  ],
  "bridging": [
    {
      "input": "6 4 2 6 3 1 5\n10 2 3 4 5 6 7 8 9 10 1\n8 8 7 6 5 4 3 2 1\n9 5 8 9 2 3 1 7 4 6",
      "output": "3\n9\n1\n4"
    }
  ],
  "mobile": [
    {
      "input": "0 4\n1 1 2 3\n2 0 0 2 2\n1 1 1 2\n1 1 2 -1\n2 1 1 2 3\n3",
      "output": "3\n4"
    }
  ],
  "ccc_tourney": [
    {
      "input": "2 8\n30\n20\n10\n40\nS 1\nW\nR 4 9\nS 4\nW\nR 2 35\nS 2\nW",
      "output": "1\n4\n0\n1\n2\n2"
    }
  ],
  "poop": [
    {
      "input": "8 4\n0 1 3\n1\n0 2 5\n1",
      "output": "2\n4\n(첫번째 질문 전까지 똥들이 1 ~ 3구간을 덮고 있어서 2를 출력하고, 2번째 질문 전까지 똥들이 1 ~ 5구간을 덮고 있어서 4를 출력한다.)"
    }
  ],
  "sumofinte": [
    {
      "input": "5 5",
      "output": "8 -3 5 -7 6\n1\n0 4 -2\n1\n0 3 -3\n1\n10\n14\n8"
    }
  ],
  "ccc_movie": [
    {
      "input": "3 7\nE 1 2\nE 2 5\nS 3 4\nE 2 3\nL 2 5\nS 1 3\nS 2 2",
      "output": "3\n0\nNo\n0"
    }
  ],
  "dfs": [
    {
      "input": "8 1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n5 8\n6 8\n7 8",
      "output": "1 2 4 8 5 6 3 7"
    }
  ],
  "virus1": [
    {
      "input": "7\n6\n1 2\n2 3\n1 5\n5 2\n5 6\n4 7",
      "output": "4"
    }
  ],
  "euler(special judge)": [
    {
      "input": "5 8\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5",
      "output": "4 2 1 3 2 5 3 4 5"
    }
  ],
  "danji": [
    {
      "input": "0 1 1 0 1 0 0",
      "output": "0 1 1 0 1 0 1\n1 1 1 0 1 0 1\n0 0 0 0 1 1 1\n0 1 0 0 0 0 0\n0 1 1 1 1 1 0\n0 1 1 1 0 0 0\n그림 1"
    }
  ],
  "maze": [
    {
      "input": "5 5\n00110\n00010\n00110\n00000\n01011",
      "output": "9"
    }
  ],
  "zerosum": [
    {
      "input": "7",
      "output": "1+2-3+4-5-6+7\n1+2-3-4+5+6-7\n1-2 3+4+5+6+7\n1-2 3-4 5+6 7\n1-2+3+4-5+6-7\n1-2-3-4-5+6+7"
    }
  ],
  "tram(open)": [
    {
      "input": "3 2 1\n2 2 3\n2 3 1\n2 1 2",
      "output": "0"
    }
  ],
  "orders": [
    {
      "input": "bbjd",
      "output": "bbdj\nbbjd\nbdbj\nbdjb\nbjbd\nbjdb\ndbbj\ndbjb\ndjbb\njbbd\njbdb\njdbb"
    }
  ],
  "starship_maze": [
    {
      "input": "5 6\n1 3\n3 4\n4 2\n2 1\n1 4\n4 5",
      "output": "1 2 4 3 5"
    }
  ],
  "bugslife": [
    {
      "input": "3 3\n1 2\n2 3\n1 3\n4 2\n1 2\n3 4",
      "output": "Suspicious bugs found!\nNo suspicious bugs found!"
    }
  ],
  "shredding(open)": [
    {
      "input": "- sum part1 part2 ...",
      "output": "- rejected\n- error"
    }
  ],
  "sprime": [
    {
      "input": "4",
      "output": "2333\n2339\n2393\n2399\n2939\n3119\n3137\n3733\n3739\n3793\n3797\n5939\n7193\n7331\n7333\n7393"
    }
  ],
  "snail_trails": [
    {
      "input": "A B C D E F G H",
      "output": "1 S . . . . . # .\n2 . . . . # . . .\n3 . . . . . . . .\n4 . . . . . . . .\n5 . . . . . # . .\n6 # . . . . . . .\n7 . . . . . . . .\n8 . . . . . . . ."
    }
  ],
  "topo_sort(open)": [
    {
      "input": "5\n1 2\n1 3\n3 2\n2 4\n3 4\n4 5",
      "output": "1 3 2 4 5"
    }
  ],
  "music (special judge)": [
    {
      "input": "1 4 3",
      "output": "6 2 5 4\n2 3"
    }
  ],
  "dizzy": [
    {
      "input": "1-->2",
      "output": "|  /|\n| / |\n|/  |\n3<--4"
    }
  ],
  "agrinet": [
    {
      "input": "4\n0 4 9 21\n4 0 8 17\n9 8 0 16\n21 17 16 0",
      "output": "28"
    }
  ],
  "longest": [
    {
      "input": "8 3\n2 1\n2 8\n5 2\n5 7\n위 입력의 설명\n- 위 입력에 대한 길과 거리에 대해 알 수 있는 모든 정보는 다음과 같다.\n점8에서 점3으로 가는 길이 있으며 그 거리는 1이다.\n점2에서 점1로 가는 길이 있으며 그 거리는 1이다.\n점2에서 점8로 가는 길이 있으며 그 거리는 1이다.\n점5에서 점2로 가는 길이 있으며 그 거리는 1이다.\n점5에서 점7로 가는 길이 있으며 그 거리는 1이다.\n- 위의 입력에 대한 풀이; 점5에서 점3으로 가는 길이 가장 멀다. 5 -> 2 -> 8 -> 3 ; 그 거리는 3이므로 답은 3이다.",
      "output": "3"
    }
  ],
  "koi_race(special judge)": [
    {
      "input": "8\n13\n1 2 5\n1 3 4\n2 5 2\n2 6 1\n3 6 3\n5 6 7\n5 8 9\n6 8 3\n4 1 6\n6 4 8\n7 4 5\n6 7 2\n8 7 4",
      "output": "32\n1 2 5 6 8 7 4 1"
    }
  ],
  "articulation": [
    {
      "input": "5\n5 1 2 3 4\n6\n2 1 3\n5 4 6 2",
      "output": "5\n2 5"
    }
  ],
  "island": [
    {
      "input": "12\n1 7\n7 3\n3 6\n6 10\n10 1\n2 12\n2 9\n8 9\n8 12\n11 5\n5 4\n11 4\n0 15 9 20 25 8 10 13 17 8 8 7\n15 0 12 12 10 10 8 15 15 8 8 9\n9 12 0 25 20 18 16 14 13 7 12 12\n20 12 25 0 8 13 14 15 15 10 10 10\n25 10 20 8 0 16 20 18 17 18 9 11\n8 10 18 13 16 0 10 9 11 10 8 12\n10 8 16 14 20 10 0 18 20 6 16 15\n13 15 14 15 18 9 18 0 5 12 12 13\n17 15 13 15 17 11 20 5 0 22 8 10\n8 8 7 10 18 10 6 12 22 0 11 12\n8 8 12 10 9 8 16 12 8 11 0 9\n7 9 12 10 11 12 15 13 10 12 9 0\nINPUT DETAILS:\n1        10            4\nxxxxxxx              x\nxxxxxxxxx            xxxx\n7 xxxxxxxxxxx 6        xxxxxxx\nxxxxxxxxxxx       11 xxxxxxxxxx 5\nxxxxxxx\nxxx\n3         12 xxxxxxx 2\nxxxxxxxx\nxxxxxxxx\nxxxxxxxxx\nxxxxxxxxx\nxxxxxxxxxx\nxxxxxxxxxx\n8 xxxxxxxxxx 9\nThe example describes three islands: {1,7,3,6,10}, {4,5,11} and\n{2,9,8,12}. The travel costs are provided as a matrix. For example,\nthe travel cost from vertex 1 to 2 is 15.",
      "output": "30\nOUTPUT DETAILS:\nThere is more than one solution. One is: FJ starts from vertex 3\nthen 7 and stops at 1, travels to 11 followed by 4,5,11. He then\nreturns back to 1, and travels to 12 followed by 2,9,8,12. Finally,\nhe returns back to 1 and continues with 10,6,3,7. The costs are 8\n* 2 = 16 for traveling from 1 to 11 and returning back, and 7 * 2\n= 14 for traveling from 1 to 12 and back -- a total cost of 30."
    }
  ],
  "network1": [
    {
      "input": "5\n2 4 3 0\n4 5 0\n0\n0\n1 0",
      "output": "1"
    }
  ],
  "network": [
    {
      "input": "5\n2 4 3 0\n4 5 0\n0\n0\n1 0",
      "output": "1\n2"
    }
  ],
  "ubiquitous": [
    {
      "input": "10 9\n10 4\n2 3\n4 5\n4 8\n5 8",
      "output": "1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1\n7"
    }
  ],
  "quick_change": [
    {
      "input": "124\n25\n194",
      "output": "4 QUARTER(S), 2 DIME(S), 0 NICKEL(S), 4 PENNY(S)\n1 QUARTER(S), 0 DIME(S), 0 NICKEL(S), 0 PENNY(S)\n7 QUARTER(S), 1 DIME(S), 1 NICKEL(S), 4 PENNY(S)"
    }
  ],
  "germination": [
    {
      "input": "4 9 8 14 14 21 12 17 5 10\n14 17 10 21 4\n4 9 5 9 12 15 20 24 10 11\n8 15 22 11 7\n5 5 5 6 6 7 7 8 8 9\n9 8 7 6 5",
      "output": "Carnation Daisy Pansy Sunflower Poppy\nAmbiguous\nPansy Daisy Sunflower Carnation Poppy"
    }
  ],
  "barn": [
    {
      "input": "4 50 18\n3\n4\n6\n8\n14\n15\n16\n17\n21\n25\n26\n27\n30\n31\n40\n41\n42\n43",
      "output": "25\n*네 개의 판자로 3--8 , 14--21 , 25--31 , 40--43 으로 막는게 최소이다."
    }
  ],
  "knapsack": [
    {
      "input": "30\n3\n5 50\n10 60\n20 140",
      "output": "220.00"
    }
  ],
  "mixing_milk": [
    {
      "input": "100  5\n5  20\n9  40\n3  10\n8  80\n6  30",
      "output": "630"
    }
  ],
  "wooden_stick": [
    {
      "input": "5\n4 9 5 2 2 1 3 5 1 4",
      "output": "2"
    }
  ],
  "palette": [
    {
      "input": "14\nBFCABCFBAIJAIJ",
      "output": "4"
    }
  ],
  "deadline": [
    {
      "input": "2 30\n1 30\n2 25\n1 40",
      "output": "70"
    }
  ],
  "moving_table": [
    {
      "input": "4\n10 20\n30 40\n50 60\n70 80\n2\n1 3\n2 200\n3\n10 100\n20 80\n30 50\n3\n1 1\n2 2\n3 3",
      "output": "10\n20\n30\n20"
    }
  ],
  "refrigerator": [
    {
      "input": "4\n-20 -15\n-14 -5\n-18 -13\n-5 -3",
      "output": "2"
    }
  ],
  "snowboard": [
    {
      "input": "10 5\n56 14 51 58 88\n26 94 24 39 41\n24 16 8 51 51\n76 72 77 43 10\n38 50 59 84 81\n5 23 37 71 77\n96 10 93 53 82\n94 15 96 69 9\n74 0 62 38 96\n37 54 55 82 38",
      "output": "7\n*참고*"
    }
  ],
  "virtual(special judge)": [
    {
      "input": "5\n1 5\n1 2 6\n1 3 9\n1 4 2\n2 3 3\n3 4 1\n2 5 5\n3 5 4\n4 5 7",
      "output": "5\n1 2 5"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n#include <stdio.h> \n int a[8] = { 6 , 2 , 9 , 8 , 1 , 4 ,17 , 5 }; \n int  dc( int low ,int high )  \n{ \n     int m,tmp1,tmp2; \n      m = (low + high )/2; \n      if ( low == high ) return a[low]; \n            tmp1 = dc(low,m); \n     tmp2 = dc(m+1,high); \n     if ( tmp1 > tmp2 ) return tmp1; \n     else return tmp2; \n} \n int main() \n{ \n     int low ,high; \n      low = 0; \n     high = 7; \n      printf(\"%d\\n\",dc(low,high)); \n}\n</stdio.h>": [
    {
      "input": "차례:",
      "output": "-최대값 찾기\n-merge sort\n-quick sort"
    }
  ],
  "cantoring": [
    {
      "input": "123456789012345678901234567",
      "output": "---------------------------\n---------         ---------\n---   ---         ---   ---\n- -   - -         - -   - -"
    }
  ],
  "color": [
    {
      "input": "8\n1 1 0 0 0 0 1 1\n1 1 0 0 0 0 1 1\n0 0 0 0 1 1 0 0\n0 0 0 0 1 1 0 0\n1 0 0 0 1 1 1 1\n0 1 0 0 1 1 1 1\n0 0 1 1 1 1 1 1\n0 0 1 1 1 1 1 1",
      "output": "9\n7"
    }
  ],
  "tile(special judge)": [
    {
      "input": "3\n3 2",
      "output": "3  3  4  4  8  8  9  9\n3  2  2  4  8  7  7  9\n5  0  2  6 10 10  7 11\n5  5  6  6  1 10 11 11\n13 13 14  1  1 18 19 19\n13 12 14 14 18 18 17 19\n15 12 12 16 20 17 17 21\n15 15 16 16 20 20 21 21"
    }
  ],
  "skyline": [
    {
      "input": "10\n10 75 40\n20 35 90\n25 90 20\n45 100 140\n80 140 70\n110 130 80\n160 195 40\n165 200 50\n175 205 100\n215 225 70",
      "output": "10 20 40\n20 35 90\n35 45 40\n45 100 140\n100 110 70\n110 130 80\n130 140 70\n140 160 0\n160 165 40\n165 175 50\n175 205 100\n205 215 0\n215 225 70"
    }
  ],
  "quad": [
    {
      "input": "2\n0 0\n0 0\n4\n0 0 1 1\n0 0 1 1\n1 1 0 0\n1 1 0 0\n8\n0 0 0 0 0 0 1 1\n0 0 0 0 0 0 1 1\n0 0 0 0 0 1 0 0\n0 0 0 0 0 1 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1",
      "output": "0\n114\n258C0511"
    }
  ],
  "mpaper": [
    {
      "input": "8 7\n5\n5 4\n2 3\n3 1\n7 6\n6 2",
      "output": "21 3"
    }
  ],
  "b_lineup": [
    {
      "input": "6 3\n1\n7\n3\n4\n2\n5\n1 5\n4 6\n2 2",
      "output": "6\n3\n0"
    }
  ],
  "stanford_fibo": [
    {
      "input": "0\n9\n999999999\n1000000000\n-1",
      "output": "0\n34\n626\n6875"
    }
  ],
  "mod_fibo": [
    {
      "input": "11 7\n11 6",
      "output": "89\n25"
    }
  ],
  "poly_multi": [
    {
      "input": "1 1\n1 2\n1 3\n1 1\n1 -2\n1 2",
      "output": "2\n1 5 6\n2\n1 0 -4"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nint a[5]; // 다이나믹 방법에서는 전에서 구한 답을 저장하는데 배열을 이용한다.\n int main()\n{\n   int i;\n     a[1]=1;            //base\n    for(i=2;i<5;i++){\n       a[i]=a[i-1]+i;  // 점화식(memoization)--점화식을 구하는게 관건이다.\n    }\n     printf(\"%d\\n\",a[4]);\n    return 0;\n}": [],
  "seat": [
    {
      "input": "1 2 3 4 5 6 7 8 9 좌석번호",
      "output": "1 2 3 4 5 6 7 8 9(o)\n2 1 3 4 6 5 7 8 9(o)\n3 1 2 4 5 6 7 8 9(x)\n1 2 3 5 4 6 7 8 9(x)"
    }
  ],
  "gc": [
    {
      "input": "3",
      "output": "5"
    }
  ],
  "scv": [
    {
      "input": "5\n0 1 0 0 1\n0 0 1 0 0\n1 0 1 1 0\n1 1 0 1 0\n1 0 0 0 1",
      "output": "6"
    }
  ],
  "unimodal": [
    {
      "input": "23 11 15 1 37 37 1 15 11 23",
      "output": "1 1 2 3 4 7 7 10 7 7 4 3 2 1 1"
    }
  ],
  "worm": [
    {
      "input": "2 4 6 6\n3 5 7 20000",
      "output": "7\n609"
    }
  ],
  "jumping_cow": [
    {
      "input": "8\n7\n2\n1\n8\n4\n3\n5\n6",
      "output": "17"
    }
  ],
  "eating_together": [
    {
      "input": "5\n1\n3\n2\n1\n1",
      "output": "1"
    }
  ],
  "sumsets": [
    {
      "input": "7",
      "output": "6"
    }
  ],
  "partition": [
    {
      "input": "5",
      "output": "7"
    }
  ],
  "tight": [
    {
      "input": "4 1\n2 5",
      "output": "100.00000\n40.74074"
    }
  ],
  "race1": [
    {
      "input": "140\n5\n100 30 100 40 50 60\n5 10 4 11 7",
      "output": "16"
    }
  ],
  "pline": [
    {
      "input": "case 1:",
      "output": "12345678901234567890            남은공백  공백의제곱\nxxxx xx x xxxx xx    4 2 1 4 2 .. 3        .. 9\nxxxxxxxx xxxxx xxx   8 5 3     .. 2        .. 4\nxxx xxxxxxx xxxx xxx 3 7 4 3   .. 0        .. 0\nxxx xxxxxxxxxx       3 10      .. 6        .. 36\ncase 2:\n12345678901234567890\nxxxx xx x xxxx xx    4 2 1 4 2 .. 3          .. 9\nxxxxxxxx xxxxx xxx   8 5 3     .. 2          .. 4\nxxx xxxxxxx xxxx     3 7 4     .. 4          .. 16\nxxx xxx xxxxxxxxxx   3 3 10    .. 2          .. 4"
    }
  ],
  "inflate": [
    {
      "input": "300 4\n100 60\n250 120\n120 100\n35 20",
      "output": "605\n보기의 답은 2 번분류에서 2 문제, 4 번 분류에서 3 문제를 선택하는 경우가 최대이다."
    }
  ],
  "lse": [
    {
      "input": "5\n1 3\n3 5\n4 6\n8 9\n4 6\n1\n1 3",
      "output": "2 3\n0 1"
    }
  ],
  "ustair": [
    {
      "input": "6\n10\n20\n15\n25\n10\n20",
      "output": "75"
    }
  ],
  "subset": [
    {
      "input": "7",
      "output": "4"
    }
  ],
  "gusul": [
    {
      "input": "1 3 4\n4 1\n5 5\n10 2\n15 16\n30 14",
      "output": "A\nB\nA\nA\nB"
    }
  ],
  "bridge": [
    {
      "input": "RGS\nRINGSR\nGRGGNS\nRINGS\nSGNIRSGNIR\nGNIRSGNIRS\nGG\nGGGGRRRR\nIIIIGGGG",
      "output": "3\n0\n16"
    }
  ],
  "primes": [
    {
      "input": "2\n3\n17\n41\n20\n666\n12\n53\n0",
      "output": "1\n1\n2\n3\n0\n0\n1\n2"
    }
  ],
  "tug": [
    {
      "input": "4\n1\n2\n3\n4\n3\n100\n99\n200",
      "output": "5 5\n199 200"
    }
  ],
  "spider (special judge)": [
    {
      "input": "4\n20 20 20 20\n6\n3 2 5 3 1 2\n7\n3 4 2 1 6 4 5",
      "output": "UDUD\nUUDUDD\nIMPOSSIBLE"
    }
  ],
  "prefix": [
    {
      "input": "A AB BA CA BBC\n.\nABABACABAABC",
      "output": "11"
    }
  ],
  "mcnugget": [
    {
      "input": "3\n3\n6\n10",
      "output": "17"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfor(i = 1;i <= 데이터의 개수 ;i++){\n   max = 0;\n   for(j = i-1; j >= 1;j--)\n      if (data[i] > data[j]) // j 번째 데이터가 i 번째 데이터보다 작으면 \n         if (max < m[j] ) max=m[j];\n   up[i] = max+1;\n}\n //최대 up sequence 구하기 ans\n ans = up[1];\nfor( i = 2 ; i <= 데이터의 개수;i++){\n   if ( ans < up[i] ) ans = up[i];\n}": [],
  "us(special judge)": [
    {
      "input": "8\n6 2 8 4 7 9 5 1",
      "output": "4\n2 4 7 9"
    }
  ],
  "tower": [
    {
      "input": "5\n25 3 4\n4 4 6\n9 2 3\n16 2 5\n1 5 2",
      "output": "3\n5\n3\n1"
    }
  ],
  "align": [
    {
      "input": "7\n3\n7\n5\n2\n6\n1\n4",
      "output": "4"
    }
  ],
  "tile_up_block": [
    {
      "input": "3\n3 2\n1 1\n2 3\n5\n4 2\n2 4\n3 3\n1 1\n5 5",
      "output": "2\n3"
    }
  ],
  "koi_cpaper": [
    {
      "input": "7\n1 2\n8 7\n20 10\n20 20\n15 12\n12 14\n11 12",
      "output": "6"
    }
  ],
  "buy_lower": [
    {
      "input": "날    1  2  3  4  5  6  7  8  9 10 11 12",
      "output": "가격 68 69 54 64 68 64 70 67 78 62 98 87"
    }
  ],
  "pongdang": [
    {
      "input": "10\n3 2 8 2 4 9 1 2 3 4",
      "output": "7"
    }
  ],
  "dice_game(special judge)": [
    {
      "input": "20\n6 4 3 3 1 2 1 6 5 4 2 3 2 1 3 1 3 2 5 6",
      "output": "35\n++-+-+-++-++-++-+-++"
    }
  ],
  "dungdal": [
    {
      "input": "8\n5 7 10 1 2 10 11 6",
      "output": "38"
    }
  ],
  "maxproduct": [
    {
      "input": "8\n1.1\n0.7\n1.3\n0.9\n1.4\n0.8\n0.7\n1.4",
      "output": "1.638"
    }
  ],
  "meeting": [
    {
      "input": "11\n1 4\n3 5\n0 6\n5 7\n3 8\n5 9\n6 10\n8 11\n8 12\n2 13\n12 14",
      "output": "4"
    }
  ],
  "mns": [
    {
      "input": "10\n8 7 4 2 5 1 9 3 10 6",
      "output": "4"
    }
  ],
  "lcs (special judge)": [
    {
      "input": "6 7\n2 4 3 1 2 1\n1 2 3 2 4 1 2",
      "output": "4\n2 3 2 1"
    }
  ],
  "zipper": [
    {
      "input": "String A: cat",
      "output": "String B: tree\nString C: tcraete"
    }
  ],
  "palin": [
    {
      "input": "5\nAb3bd",
      "output": "2"
    }
  ],
  "crossed_matching": [
    {
      "input": "6 6\n1 3 1 3 1 3\n3 1 3 1 3 1\n4 4\n1 1 3 3\n1 1 3 3\n12 11\n1 2 3 3 2 4 1 5 1 3 5 10\n3 1 2 3 2 4 12 1 5 5 3",
      "output": "6\n0\n8"
    }
  ],
  "similarity(special judge)": [
    {
      "input": "7 AGTGATG\n5 GTTAG",
      "output": "14\nAGTGATG\n-GTTA-G"
    }
  ],
  "01knapsack": [
    {
      "input": "30\n3\n5 50\n10 60\n20 140",
      "output": "200"
    }
  ],
  "prime_sum(open)": [
    {
      "input": "20",
      "output": "4"
    }
  ],
  "playoff": [
    {
      "input": "4 1 0",
      "output": "21 32\n11 32"
    }
  ],
  "chess": [
    {
      "input": "87 84\n66 78\n86 94\n93 87\n72 100\n78 63\n60 91\n77 64\n77 91\n87 73\n69 62\n80 68\n81 83\n74 63\n86 68\n53 80\n59 73\n68 70\n57 94\n93 62\n74 80\n70 72\n88 85\n75 99\n71 66\n77 64\n81 92\n74 57\n71 63\n82 97\n76 56",
      "output": "2506"
    }
  ],
  "bargain": [
    {
      "input": "2\n1 7 3 5\n2 7 1 8 2 10\n2\n7 3 2\n8 2 5",
      "output": "14"
    }
  ],
  "coin": [
    {
      "input": "Penny - $0.01",
      "output": "Nickel - $0.05\nDime - $0.10\nQuarter - $0.25\nHalf Dollar - $0.50"
    }
  ],
  "이런 류의 확장 방법은 하나씩 녹여가면서 큰 덩어리를 만들어간다. 이 하나를 큰 덩이에 녹이는 것이 유리한 가 아니면 버리는 것이 유리한가를 판단하면서 확장 .... 최종적으로 전체를 고려한 큰 덩이를 만든다.\nA 기업에서 답을 구하고\n이를 이용하여 A,B 기업 기업에서 답을 구하고\n이를 이용하여 마지막 A,B,C 기업으로 확장하면서 답을 구함.": [],
  "invest (special judge)": [
    {
      "input": "4 3\n2 1 3\n5 4 4\n7 9 9\n8 11 10",
      "output": "12\n0 3 1"
    }
  ],
  "bits": [
    {
      "input": "4 2",
      "output": "11"
    }
  ],
  "stringsobits": [
    {
      "input": "5 3 19",
      "output": "10011"
    }
  ],
  "bar_code": [
    {
      "input": "7 4 3\n5\n1001110\n1110110\n1001100\n1001110\n1000100",
      "output": "16\n4\n15\n3\n4\n0"
    }
  ],
  "apple_catching": [
    {
      "input": "7 2\n2\n1\n1\n2\n2\n1\n1",
      "output": "6"
    }
  ],
  "tiling": [
    {
      "input": "2\n8",
      "output": "3\n171"
    }
  ],
  "digit_card": [],
  "spam": [
    {
      "input": "A 4",
      "output": "B |3\nC (\nD |)\nE 3\nF |=\nG 6\nH #\nI |\nJ _|\nK |<\nL |_\nM |\\/|\nN |\\|\nO 0\nP |0\nQ (,)\nR |?\nS 5\nT 7\nU |_|\nV \\/\nW \\/\\/\nX ><\nY -/\nZ 2"
    }
  ],
  "c_perm": [
    {
      "input": "3",
      "output": "2"
    }
  ],
  "big_barn": [
    {
      "input": "1 2 3 4 5 6 7 8",
      "output": "1 . . . . . . . .\n2 . # . . . # . .\n3 . . . . . . . .\n4 . . . . . . . .\n5 . . . . . . . .\n6 . . # . . . . .\n7 . . . . . . . .\n8 . . . . . . . ."
    }
  ],
  "range": [
    {
      "input": "010",
      "output": "111\n111"
    }
  ],
  "tickets": [
    {
      "input": "4",
      "output": "670"
    }
  ],
  "dice_stack": [
    {
      "input": "5\n2 3 1 6 5 4\n3 1 2 4 6 5\n5 6 4 1 3 2\n1 3 6 2 4 5\n4 1 6 5 2 3",
      "output": "29\n* 입력 예의 주사위들을 쌓아서 출력 예와 같은 합을 얻으려면 아래 그림과 같이 쌓으면 된다."
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n#include <stdio.h>\nint data[101];\nint dy[51][101];\n int diff(int m,int n)\n{\n   int i,max,min;\n    max = min = data[m];\n    for( i = m +1 ; i <= n ; i++){\n      if ( max < data[i] ) max = data[i];\n      if ( min > data[i] ) min = data[i];\n   }\n    return max - min;\n}\n int main()\n{\n   int i,j,k;\n   int n,ng,max,tmp;\n    scanf(\"%d %d\",&n,&ng);\n    for( i = 1 ; i <= n ; i++){\n      scanf(\"%d\",&data[i]);\n   }\n    for( i = 1 ; i <= ng ; i++){\n      for( j = i*2 ; j <= n ; j++){\n         max = -1;\n         for( k = 2*(i-1) ; k <= j-2 ; k++){\n            tmp = diff(k+1,j);\n            if ( dy[i-1][k] + tmp> max ) {\n               max = dy[i-1][k] + tmp;\n            }\n         }\n         dy[i][j] = max;\n      }\n   }\n    int ans=-1;\n    for( i = ng*2 ; i <= n ; i++){\n      if ( dy[ng][i] > ans ) ans = dy[ng][i];\n   }\n    printf(\"%d\\n\",ans);\n}": [],
  "ninterval": [
    {
      "input": "10\n4\n2 5 7 1 3 4 8 6 9 3",
      "output": "20"
    }
  ],
  "koi_bead(special_judge)": [
    {
      "input": "8 3\n5 4 2 6 9 3 8 7",
      "output": "17\n4 2 2"
    }
  ],
  "locomotive": [
    {
      "input": "(1) (2) (3) (4) (5) (6) (7)",
      "output": "----------------------------\n35  40  50  10  30  45  60"
    }
  ],
  "fshop": [
    {
      "input": "3  5\n7  23  -5  -24  16\n5  21  -4  10   23\n-21  5  -4  -20  20",
      "output": "53"
    }
  ],
  "travel": [
    {
      "input": "3 3\n3 1 2\n2 3 1\n1 3 2\n2 4 3\n4 3 2\n3 4 2",
      "output": "8"
    }
  ],
  "milage": [
    {
      "input": "4 2\n12 13 8\n11 6\n9",
      "output": "23"
    }
  ],
  "ep": [
    {
      "input": "10 5\n1 2 3 6 7 9 11 22 44 50",
      "output": "9"
    }
  ],
  "keypad": [
    {
      "input": "1 4\n0\ncdko\n40179\n90922\n55086\n17254\n3 5\n456\ndefgh\n10\n21\n3\n5\n12",
      "output": "0: cdko\n4: d\n5: efg\n6: h"
    }
  ],
  "interval(special judge)": [
    {
      "input": "10\n2 5 7 1 3 4 8 6 9 3",
      "output": "20\n4\n2 2 3 3"
    }
  ],
  "treat": [
    {
      "input": "5\n1\n3\n1\n5\n2",
      "output": "43"
    }
  ],
  "game": [
    {
      "input": "6\n4 7 2 9 5 2",
      "output": "18 11"
    }
  ],
  "two_ends": [
    {
      "input": "4\n3 2 10 4",
      "output": "the greedy strategy might lose by as many as 7 points."
    }
  ],
  "mulpuz": [
    {
      "input": "6\n10 1 50 50 20 5",
      "output": "3650"
    }
  ],
  "chord": [
    {
      "input": "5\n97 31\n1 45\n27 5\n11 65\n43 72",
      "output": "3"
    }
  ],
  "max_exp": [
    {
      "input": "8\n1+2*3-9*1-5+9/2",
      "output": "225"
    }
  ],
  "matrixprod": [
    {
      "input": "5\n2  5  3  6  4  9",
      "output": "186"
    }
  ],
  "polygon": [
    {
      "input": "4\nt -7 t 4 x 2 x 5",
      "output": "33\n1 2"
    }
  ],
  "black_white(special judge)": [
    {
      "input": "10\n1110100010\n12\n111000111000",
      "output": "31\n1 8\n2 7\n3 4\n5 6\n9 10\n40\n1 12\n2 5\n3 4\n6 7\n8 11\n9 10"
    }
  ],
  "numtri": [
    {
      "input": "5\n7\n3 8\n8 1 0\n2 7 4 4\n4 5 2 6 5",
      "output": "30"
    }
  ],
  "anniversary": [
    {
      "input": "7\n1\n1\n1\n1\n1\n1\n1\n1 3\n2 3\n6 4\n7 4\n4 5\n3 5\n0 0",
      "output": "5"
    }
  ],
  "batch": [
    {
      "input": "2\n50\n100 100\n100 100\n5\n1\n1 3\n3 2\n4 3\n2 3\n1 4",
      "output": "45000\n153"
    }
  ],
  "ba": [
    {
      "input": "2\n50\n100 100\n100 100\n5\n1\n1 3\n3 2\n4 3\n2 3\n1 4",
      "output": "45000\n153"
    }
  ],
  "football": [
    {
      "input": "2\n0.0 0.1 0.2 0.3\n0.9 0.0 0.4 0.5\n0.8 0.6 0.0 0.6\n0.7 0.5 0.4 0.0",
      "output": "2"
    }
  ],
  "moving": [
    {
      "input": "1 1\n7 3",
      "output": "1\n4"
    }
  ],
  "tothemax": [
    {
      "input": "0 -2 -7 0",
      "output": "9 2 -6 2\n-4 1 -4 1\n-1 8 0 -2"
    }
  ],
  "land(special judge)": [
    {
      "input": "10 15 4\n41 40 41 38 39 39 40 42 40 40\n39 40 43 40 36 37 35 39 42 42\n44 41 39 40 38 40 41 38 35 37\n38 38 33 39 36 37 32 36 48 40\n39 40 39 39 39 40 40 41 43 41\n39 40 41 38 39 38 39 39 39 42\n36 39 39 39 39 40 39 41 40 41\n31 37 36 41 41 40 39 41 40 40\n40 40 40 42 41 40 39 39 39 39\n42 40 44 40 38 40 39 39 37 41\n41 41 40 39 39 40 41 40 39 40\n47 45 49 43 43 41 41 40 39 42\n42 41 41 39 40 39 42 40 42 42\n41 44 49 43 46 41 42 41 42 42\n45 40 42 42 46 42 44 40 42 41",
      "output": "4 5 8 11"
    }
  ],
  "stone": [
    {
      "input": "10 3\n2 1 2 2 1 1 3 1 3 3",
      "output": "2"
    }
  ],
  "poj_dna": [
    {
      "input": "4",
      "output": "9"
    }
  ],
  "hanoi1": [
    {
      "input": "7\n2 1 4\n2 1\n3\n7 6 5 4",
      "output": "3\n4"
    }
  ],
  "triangulate": [
    {
      "input": "7\n5 11\n10 8\n11 5\n9 0\n3 0\n0 3\n1 7",
      "output": "69.43"
    }
  ],
  "tourist": [
    {
      "input": "9 7\n*........\n.....**#.\n..**...#*\n..####*#.\n.*.#*.*#.\n...#**...\n*........\n5 5\n.*.*.\n*###.\n*.*.*\n.###*\n.*.*.",
      "output": "7\n8"
    }
  ],
  "max_sequence": [
    {
      "input": "5\n-5 9 -5 11 20",
      "output": "40"
    }
  ],
  "jump": [
    {
      "input": "8\n0 7 1\n3 4 1\n6 8 1\n8 6 1\n12 2 0\n13 2 1\n14 2 1\n15 7 1",
      "output": "6"
    }
  ],
  "canadian_tour": [
    {
      "input": "8 9\nVancouver\nYellowknife\nEdmonton\nCalgary\nWinnipeg\nToronto\nMontreal\nHalifax\nVancouver Edmonton\nVancouver Calgary\nCalgary Winnipeg\nWinnipeg Toronto\nToronto Halifax\nMontreal Halifax\nEdmonton Montreal\nEdmonton Yellowknife\nEdmonton Calgary\n5 5\nC1\nC2\nC3\nC4\nC5\nC5 C4\nC2 C3\nC3 C1\nC4 C1\nC5 C2",
      "output": "7\n1"
    }
  ],
  "varacious": [
    {
      "input": "5 2",
      "output": "3"
    }
  ],
  "twire": [
    {
      "input": "5 2\n2\n3\n5\n1\n4",
      "output": "15"
    }
  ],
  "logs_stacking": [
    {
      "input": "1\n2\n3\n5",
      "output": "1\n2\n5\n34"
    }
  ],
  "LIS(special judge)": [
    {
      "input": "5\n1 4 6 4 2",
      "output": "3\n1 4 6"
    }
  ],
  "treecount(open)": [
    {
      "input": "3",
      "output": "5"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n// 최솟값에 대한 정의 \n const int MIN_INTEGER_VALUE = -100;\n // 구간에 대한 정의\n// s <= n <= e 를 만족하는 n의 범위를 [s,e] 라 한다.\n// s < n < e 를 만족하는 n의 범위를 (s,e) 라 한다. \n int binary_search(int Arrays[], int start, int end, int key) { // 탐색 범위는 [start,end) 이다. \n    if( start==end ) return start; // 탐색을 더 할 필요가 없는 경우 \n         int middle = (start+end)/2;\n    if( Arrays[middle] < key ) { // [middle+1,end) 구간으로 범위 축소\n        return binary_search(Arrays,middle+1,end,key);\n    }\n    else if( Arrays[middle] > key ) { // [start,middle) 구간으로 범위 축소\n         return binary_search(Arrays,start,middle,key);\n    }\n    else return middle;\n}\n// key보다 크거나 같은 최소 원소의 위치를 return하는 이진 탐색 소스 \n int main() {\n    int N = 9;\n    int data[] = {6,2,9,8,3,4,1,7,4};\n     int LIS[N+1]; // LIS의 길이는 1이상 N이하이므로, 배열 크기는 N+1로 선언한다. \n    int maxLength = 0; // LIS 배열의 초기 높이. \n     LIS[0] = MIN_INTEGER_VALUE; // 편의상 최솟값을 가리키는 최소 원소를 삽입 \n     for(int i=0 ; i < N;i++){\n        int position = binary_search(LIS,0,maxLength+1,data[i]); // 이진 탐색을 통해 삽입할 원소의 위치를 확인 \n        LIS[position] = data[i]; // LIS 배열에 원소 갱신\n        if( maxLength < position ) maxLength = position; // maxLength 갱신 \n    }\n    int ans = maxLength; // ans : maxLength\n}": [],
  "border": [
    {
      "input": "20 5 5\n1 3\n3 2\n8 7\n10 3\n16 5",
      "output": "3 1"
    }
  ],
  "이 파트를 완전히 이해하기 위해서는 2 의 보수 표현법에 대한 공부가 필요합니다.": [
    {
      "input": "/*",
      "output": "10진수 2진수 합\n----------------\n0     000  0\n1     001  6\n2     010  2\n3     011  8\n4     100  9\n5     101 15\n6     110 11\n7     111 17\n*/"
    }
  ],
  "to_carry(open)": [
    {
      "input": "4 = 00000000 00000000 00000000 00000100",
      "output": "+6 = 00000000 00000000 00000000 00000110\n----------------------------------------\n2 = 00000000 00000000 00000000 00000010"
    }
  ],
  "dump": [
    {
      "input": "3\n-1",
      "output": "00000000 00000000 00000000 00000011\n11111111 11111111 11111111 11111111"
    }
  ],
  "rms": [
    {
      "input": "12 = 00....01100  (4)",
      "output": "^\n|\n10 = 00....01010  (2)\n^\n|"
    }
  ],
  "endian(open)": [
    {
      "input": "123456789\n-123456789\n1\n16777216\n20034556",
      "output": "123456789 converts to 365779719\n-123456789 converts to -349002504\n1 converts to 16777216\n16777216 converts to 1\n20034556 converts to -55365375"
    }
  ],
  "rbit(open)": [
    {
      "input": "72",
      "output": "4E"
    }
  ],
  "bst": [
    {
      "input": "8\n10",
      "output": "1 15\n9 11"
    }
  ],
  "cellophane": [
    {
      "input": "3\nR\n1 4\n4 1\nB\n3 5\n7 2\nY\n2 7\n5 3\nG",
      "output": "3"
    }
  ],
  "easy_problem": [
    {
      "input": "1\n2\n3\n4\n78",
      "output": "2\n4\n5\n8\n83"
    }
  ],
  "castle": [
    {
      "input": "7 4\n11 6 11 6 3 10 6\n7 9 6 13 5 15 5\n1 10 12 7 13 7 5\n13 11 10 8 10 12 13",
      "output": "5\n9\n16"
    }
  ],
  "snapper": [
    {
      "input": "4\n1 0\n1 1\n4 0\n4 47",
      "output": "Case #1: OFF\nCase #2: ON\nCase #3: OFF\nCase #4: ON"
    }
  ],
  "relation": [
    {
      "input": "9\n7 3\n7\n1 2\n1 3\n2 7\n2 8\n2 9\n4 5\n4 6\n9\n8 6\n7\n1 2\n1 3\n2 7\n2 8\n2 9\n4 5\n4 6",
      "output": "3\n-1"
    }
  ],
  "knight": [
    {
      "input": "1 1\n2 1",
      "output": "3"
    }
  ],
  "robo": [
    {
      "input": "5 6\n0 0 0 0 0 0\n0 1 1 0 1 0\n0 1 0 0 0 0\n0 0 1 1 1 0\n1 0 0 0 0 0\n4 2 3\n2 4 1",
      "output": "9"
    }
  ],
  "camelot": [
    {
      "input": "8 8\nD 4\nA 3 A 8\nH 1 H 8",
      "output": "10\n위 보기는\nThey gather at B5.\nKnight 1: A3 - B5 (1 move)\nKnight 2: A8 - C7 - B5 (2 moves)\nKnight 3: H1 - G3 - F5 - D4 (picking up king) - B5 (4 moves)\nKnight 4: H8 - F7 - D6 - B5 (3 moves)\n1 + 2 + 4 + 3 = 10 moves."
    }
  ],
  "delivery": [
    {
      "input": "7 8\n#.S..##.\n.#H.....\n.#..#..#\n.#.H..##\n#..#....\n..#.H...\n########",
      "output": "7"
    }
  ],
  "dijkstra (special judge)": [
    {
      "input": "5 8 1\n1 2 7\n1 3 4\n1 4 6\n1 5 1\n3 2 2\n3 4 5\n4 2 3\n5 4 1",
      "output": "1\n1 5 4 2\n1 3\n1 5 4\n1 5"
    }
  ],
  "sparty": [
    {
      "input": "4 8 2\n1 2 4\n1 3 2\n1 4 7\n2 1 1\n2 3 5\n3 1 2\n3 4 4\n4 2 3",
      "output": "10"
    }
  ],
  "spheap": [
    {
      "input": "4 4\n1 10 2 1\n2 10 3 2\n3 2 6 3\n1 1 10 2\n1 1\n3 4",
      "output": "17"
    }
  ],
  "revamp(open)": [
    {
      "input": "4 4 1\n1 2 10\n2 4 10\n1 3 1\n3 4 100",
      "output": "1"
    }
  ],
  "floyd-warshall": [
    {
      "input": "5 1 4\n0 7 4 6 1\n1000 0 1000 1000 1000\n1000 2 0 5 1000\n1000 3 1000 0 1000\n1000 1000 1000 1 0",
      "output": "2"
    }
  ],
  "bessi": [
    {
      "input": "5\nA d 6\nB d 3\nC e 9\nd Z 8\ne Z 3",
      "output": "B 11"
    }
  ],
  "cowcontest": [
    {
      "input": "5 5\n4 3\n4 2\n3 2\n1 2\n2 5",
      "output": "2"
    }
  ],
  "msquare": [
    {
      "input": "2 6 8 4 5 7 3 1",
      "output": "7\nBCABCCB"
    }
  ],
  "1 번 정점을 시작 정점으로 하여 모든 정점으로의 최단거리 문제를 생각해 보자.\n이 경우 1 -> 2 -> 3 -> 1 로 가면 음수이다. 이 경우 최단거리의 의미가 없으므로 음수 사이클을 인식하고 아닌 경우 최단거리를 구하는 프로그램을 구하려고 한다.": [],
  "wormhole": [
    {
      "input": "2\n3 3 1\n1 2 2\n1 3 4\n2 3 1\n3 1 3\n3 2 1\n1 2 3\n2 3 4\n3 1 8",
      "output": "NO\nYES"
    }
  ],
  "lake": [
    {
      "input": "10 12\nW........WW.\n.WWW.....WWW\n....WW...WW.\n.........WW.\n.........W..\n..W......W..\n.W.W.....WW.\nW.W.W.....W.\n.W.W......W.\n..W.......W.",
      "output": "3"
    }
  ],
  "cheese": [
    {
      "input": "8 9\n0 0 0 0 0 0 0 0 0\n0 0 0 1 1 0 0 0 0\n0 0 0 1 1 0 1 1 0\n0 0 1 1 1 1 1 1 0\n0 0 1 1 1 1 1 0 0\n0 0 1 1 0 1 1 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0",
      "output": "4"
    }
  ],
  "race": [
    {
      "input": "1 2 -2\n3 -2\n3 -2\n5 4 -2\n6 4 -2\n6 -2\n7 8 -2\n9 -2\n5 9 -2\n-2\n-1",
      "output": "2 3 6\n1 3\n출처: IOI'95"
    }
  ],
  "pictures": [
    {
      "input": "7\n-15 0 5 10\n-5 8 20 25\n15 -4 24 14\n0 -6 16 4\n2 15 10 22\n30 10 36 20\n34 0 40 16",
      "output": "228"
    }
  ],
  "?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n#include < stdio.h >\nint include[5];\n         void bt(int i)\n{\n   int k;\n          if(i==4){ \n       for(k=1;k<=4;k++)\n          printf(\"%d \",include[k]);\n          printf(\"\\n\");\n   }else{\n       include[i+1]=1; //포함하는 경우 \n       bt(i+1);\n       include[i+1]=0;//포함하지 않는 경우\n       bt(i+1);\n   }\n}\n         main()\n{\n   bt(0);\n}": [
    {
      "input": "(문제) sum of subset",
      "output": "6 , 1 , 9 , 8 , 3 , 4 , 7\n총 합은 38 , 합은 반은 19 이다.\n이 수들을 적절히 뽑아 19 를 만들 수 있는 방법의 수를 구하는 문제."
    }
  ],
  "eating_puzzle": [
    {
      "input": "40 6\n7 13 17 19 29 31",
      "output": "39"
    }
  ],
  "scales": [
    {
      "input": "5\n1 9 5 3 8",
      "output": "2"
    }
  ],
  "word_matrix": [
    {
      "input": "GPEA",
      "output": "MPLH\nAPZN\nOYQT"
    }
  ],
  "beeper": [
    {
      "input": "10 10\n1 1\n4\n2 3\n5 5\n9 4\n6 5",
      "output": "The shortest path has length 24"
    }
  ],
  "good_s(open)": [
    {
      "input": "7",
      "output": "1213121"
    }
  ],
  "nqueen(open)": [
    {
      "input": "행    1 2 3 4 5 6",
      "output": "열    2 4 6 1 3 5"
    }
  ],
  "door": [
    {
      "input": "7\n2 5\n4\n3\n1\n6\n5",
      "output": "5"
    }
  ],
  "sudoku (special judge)": [
    {
      "input": "035469278\n782105609\n060278135\n321046897\n804913506\n596820413\n917652080\n603701952\n258394761",
      "output": "135469278\n782135649\n469278135\n321546897\n874913526\n596827413\n917652384\n643781952\n258394761"
    }
  ],
  "addi_chain (special judge)": [
    {
      "input": "5\n7\n12\n15\n77",
      "output": "1 2 4 5\n1 2 4 6 7\n1 2 4 8 12\n1 2 4 5 10 15\n1 2 4 8 9 17 34 68 77"
    }
  ],
  "SAT": [
    {
      "input": "(a|(b&c))|(c&~c)\n(a|(b&c))&(c&~c)",
      "output": "1\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0"
    }
  ],
  "max_clique": [
    {
      "input": "a(1,1)",
      "output": "a(2,1) a(2,2)\na(3,1) a(3,2) a(3,3)\n...\na(n,1) a(n,2) .......... a(n,n)"
    }
  ],
  "election": [
    {
      "input": "HHHHH\nJHJHJ\nHHHHH\nHJHHJ\nHHHHH",
      "output": "2"
    }
  ],
  "clock": [
    {
      "input": "|-------|    |-------|    |-------|",
      "output": "|       |    |       |    |   |   |\n|---O   |    |---O   |    |   O   |\n|       |    |       |    |       |\n|-------|    |-------|    |-------|\nA            B            C\n|-------|    |-------|    |-------|\n|       |    |       |    |       |\n|   O   |    |   O   |    |   O   |\n|   |   |    |   |   |    |   |   |\n|-------|    |-------|    |-------|\nD            E            F\n|-------|    |-------|    |-------|\n|       |    |       |    |       |\n|   O   |    |   O---|    |   O   |\n|   |   |    |       |    |   |   |\n|-------|    |-------|    |-------|\nG            H            I"
    }
  ],
  "latin_square": [
    {
      "input": "1  2  3  4  5",
      "output": "2  1  4  5  3\n3  4  5  1  2\n4  5  2  3  1\n5  3  1  2  4"
    }
  ],
  "job_assignment": [
    {
      "input": "4\n12 37 23 15\n28 11 21 19\n24 14 41 40\n21 23 31 23",
      "output": "136\n2 1 4 3"
    }
  ],
  "pcontrol": [
    {
      "input": "4 5\n1 3 100\n3 2 50\n2 4 60\n1 2 40\n2 3 80",
      "output": "60 1\n3"
    }
  ],
  "assignment(open)": [
    {
      "input": "6 4\n1 2 3 4\n2 3 1 4\n4 2 3 1\n3 1 2 4\n1 3 4 2\n1 4 2 3\n2 1 3 2",
      "output": "2"
    }
  ],
  "ditch": [
    {
      "input": "5 4\n1 2 40\n1 4 20\n2 4 20\n2 3 30\n3 4 10",
      "output": "50"
    }
  ],
  "pigs": [
    {
      "input": "3 3\n3 1 10\n2 1 2 2\n2 1 3 3\n1 2 6",
      "output": "7"
    }
  ],
  "exodus": [
    {
      "input": "6 11\n0 0 0 0 0 0\n0 1 0 1 0 1\n1 1 0 1 1 1\n0 1 0 1 0 1\n0 0 0 0 0 0\n0 0 0 0 0 0",
      "output": "0"
    }
  ],
  "couple(special judge)": [
    {
      "input": "3\n2 2 3\n2 1 3\n2 1 2\n5\n5 1 2 3 4 5\n1 1\n1 1\n1 1\n1 1\n1\n0",
      "output": "3\n1 2\n2 3\n3 1\n2\n1 2\n2 1\n3 -1\n4 -1\n5 -1\n0\n1 -1"
    }
  ],
  "seek": [
    {
      "input": "ababcababababcabab\naaaaa",
      "output": "2 4 9 18\n1 2 3 4 5"
    }
  ],
  "period": [
    {
      "input": "3\naaa\n12\naabaabaabaab",
      "output": "2 2\n3 3\n2 2\n6 2\n9 3\n12 4"
    }
  ],
  "cdrw": [
    {
      "input": "20",
      "output": "13"
    }
  ],
  "butt": [
    {
      "input": "4 3\n10 3\n100 5",
      "output": "5\n14\n124"
    }
  ],
  "ally": [
    {
      "input": "3",
      "output": "5"
    }
  ],
  "runaround": [
    {
      "input": "81361",
      "output": "81362"
    }
  ],
  "aorb": [
    {
      "input": "100",
      "output": "24"
    }
  ],
  "odometer": [
    {
      "input": "13\n15\n999999",
      "output": "13: 12\n15: 13\n999999: 531440"
    }
  ],
  "equ(open)": [
    {
      "input": "15 11 3\n7 11 17",
      "output": "-1.75\n2.66"
    }
  ],
  "straight(open)": [
    {
      "input": "0 1\n1 3\n2 5",
      "output": "yes"
    }
  ],
  "lines": [
    {
      "input": "4\n-1 1\n-2 0\n0 0\n1 1",
      "output": "4"
    }
  ],
  "visible": [
    {
      "input": "4\n2\n4\n5\n231",
      "output": "1 2 5\n2 4 13\n3 5 21\n4 231 32549"
    }
  ],
  "jailer": [
    {
      "input": "c c c c c  -- 최초 상태",
      "output": "o o o o o  -- 1 의 배수\no c o c o  -- 2 의 배수\no c c c o  -- 3 의 배수\no c c o o  -- 4 의 배수\no c c o c  -- 5 의 배수"
    }
  ],
  "divisors": [
    {
      "input": "5 1\n6 3\n10 4",
      "output": "2\n6\n16"
    }
  ],
  "ones": [
    {
      "input": "3\n7\n9901",
      "output": "3\n6\n12"
    }
  ],
  "triangle1": [
    {
      "input": "9",
      "output": "3"
    }
  ],
  "bullseys": [
    {
      "input": "SCORE: N to M, PLAYER P WINS.",
      "output": "SCORE: N to M, TIE."
    }
  ],
  "mfactor": [
    {
      "input": "4\n36\n38\n40\n42",
      "output": "38"
    }
  ],
  "divisor": [
    {
      "input": "10",
      "output": "4"
    }
  ],
  "balloonist": [
    {
      "input": "1\n2\n6\n1\n3\n1\n1\n1\n1\n1",
      "output": "9"
    }
  ],
  "factorial1": [
    {
      "input": "7",
      "output": "4"
    }
  ],
  "simple_calc": [
    {
      "input": "1\n50.50\n25.50\n10.15",
      "output": "27.85"
    }
  ],
  "pair (special judge)": [
    {
      "input": "남학생수 여학생수",
      "output": "A 초등 출신      4       2\nB 초등 출신      1       3\nC 초등 출신      1       1"
    }
  ],
  "diagonal": [
    {
      "input": "41 25",
      "output": "65"
    }
  ],
  "eva_balance": [
    {
      "input": "9\n5\n20",
      "output": "empty 9\n1,3 9\n1,9 3,27"
    }
  ],
  "grid": [
    {
      "input": "5 4\n1 1",
      "output": "126\n2"
    }
  ],
  "moronic": [
    {
      "input": "-13",
      "output": "110111"
    }
  ],
  "inver": [
    {
      "input": "5 9\n7 3",
      "output": "4 5 3 2 1\n1 2 3 4 7 6 5"
    }
  ],
  "yeehaa": [
    {
      "input": "4.0 6\n4.0 17\n3.14159 100\n42 2",
      "output": "1.333\n0.621\n0.096\n21.000"
    }
  ],
  "combinations": [
    {
      "input": "100  6\n20  5\n18  6",
      "output": "100 things taken 6 at a time is 1192052400 exactly.\n20 things taken 5 at a time is 15504 exactly.\n18 things taken 6 at a time is 18564 exactly."
    }
  ],
  "stirling": [
    {
      "input": "1\n4 2",
      "output": "1"
    }
  ],
  "a , p 가 서로 소이고 , p 가 소수이면\n는 p 의 배수이다. 즉": [
    {
      "input": "그림에서 세 구역으로 이루어져 있다.",
      "output": "A 구역에만 들어 있는 A\nB\nA ^B\nA B A^B\n1   1\n1 1\n------\n1 1 2\nA B C A^B A^C B^C A^B^C\n1      1   1       1\n1    1       1   1\n1      1   1   1\n-----------------------\n1 1 1  2   2   2   3\nA  B  C  D A^B A^C A^D B^C B^D C^D\n4 개 인 경우\n한 개자리 더해 A , B , C , D\n두개 빼 주고\n세개 더해주고\n네개 빼주고"
    }
  ],
  "relatives": [
    {
      "input": "7\n12\n0",
      "output": "6\n4"
    }
  ],
  "happy": [
    {
      "input": "2006 1\n2006 2\n2006 3",
      "output": "1\n3\n5"
    }
  ],
  "series": [
    {
      "input": "6",
      "output": "2 2"
    }
  ],
  "lamps": [
    {
      "input": "10\n1\n-1\n7 -1",
      "output": "0000000000\n0101010101\n0110110110\n보기의  경우 버튼이 한 번 눌려지고 7 번째 램프가 off 되어 있어야 하므로\n1 번 , 2 번 , 4 번 버튼이 눌려지면 7 번째 램프가 꺼진 상태가 되므로 세 가지\n경우가 존재한다."
    }
  ],
  "sum1(open)": [
    {
      "input": "12",
      "output": "7"
    }
  ],
  "just": [
    {
      "input": "N       N!",
      "output": "0       1\n1       1\n2       2\n3       6\n4      24\n5     120\n10 3628800"
    }
  ],
  "factorial3": [
    {
      "input": "6\n3\n60\n100\n1024\n23456\n8735373",
      "output": "0\n14\n24\n253\n5861\n2183837"
    }
  ],
  "fac": [
    {
      "input": "1\n10\n100\n1422534662",
      "output": "0\n2\n24\n355633660"
    }
  ],
  "nth_pow(open)": [],
  "dilemma": [
    {
      "input": "1\n2\n10",
      "output": "7\n8\n20"
    }
  ],
  "numbers": [
    {
      "input": "2\n5\n2",
      "output": "Case #1: 935\nCase #2: 027"
    }
  ],
  "grazing_cow": [
    {
      "input": "10 12\n23 45\n12 18",
      "output": "62.517\n1366.999\n189.670"
    }
  ],
  "submarine": [
    {
      "input": "10010111\n01001011000001\n100000000000101\n11111110000\n10000001111110101100111101",
      "output": "noise\nnoise\nsubmarine\nnoise\nsubmarine"
    }
  ],
  "circumference": [
    {
      "input": "0.0 -0.5 0.5 0.0 0.0 0.5\n0.0 0.0 0.0 1.0 1.0 1.0\n5.0 5.0 5.0 7.0 4.0 6.0\n0.0 0.0 -1.0 7.0 7.0 7.0\n50.0 50.0 50.0 70.0 40.0 60.0\n0.0 0.0 10.0 0.0 20.0 1.0\n0.0 -500000.0 500000.0 0.0 0.0 500000.0",
      "output": "3.14\n4.44\n6.28\n31.42\n62.83\n632.24\n3141592.65"
    }
  ],
  "저 학년을 대상으로 한 vector 문서 입니다. 나름 쉽게 쓸려고 고민은 많이 하였으나 워낙 짧은 지식으로 글을 쓰니 이상한 점 있 으면 알려 주세요. 아무래도 수학적인 내용이 많이 들어가니 이해가 되지 않는 개념은 스스로 공부가 필요할 것 같습니다.": [],
  "vec(open)": [
    {
      "input": "2 6\n4 2\n3 4\n3 5\n5 9\n1 3",
      "output": "0.500 0.500\n-3.000 2.000"
    }
  ],
  "in_out(open)": [
    {
      "input": "2 2 3\n-1 2\n2 2 3\n-1 3",
      "output": "yes\nno"
    }
  ],
  "clock_anticlock": [
    {
      "input": "2 4\n3 3\n2 1\n2 1\n3 3\n2 1\n0 0\n1 1\n2 2",
      "output": "clock\nstraight\nstraight"
    }
  ],
  "wonder": [
    {
      "input": "3\n100 0 500\n-500.243 -200.1 -300.5\n0 300 200\n2\n1 1 1 0.65\n-1 0 0 1.57\n3\n1 0 0\n0 1 0\n0 0 1\n4\n1 -1 -1 0.9553\n-1 1 -1 0.9554\n-1 -1 1 0.9553\n-1 1 -1 0.9554\n3\n1 0 0\n0 1 0\n0 0 1\n4\n1 -1 -1 0.9553\n-1 1 -1 0.9553\n-1 -1 1 0.9553\n-1 1 -1 0.9553",
      "output": "2\n1\n0"
    }
  ],
  "intersection": [
    {
      "input": "예로 ,",
      "output": "선분의 시작점: ( 4 , 9) -- (xstart,ystart)\n선분의 끝점:(11,2) - (xend,yend)\n사각형의 왼쪽 위점: (1,5) --(xleft,ytop)\n사각형의 오른쪽 아래점:(7,1) -- ( xright,ybotton)"
    }
  ],
  "c_h(special judge)": [
    {
      "input": "7\n2 5\n4 4\n3 3\n1 2\n2 2\n5 2\n4 1",
      "output": "4 1\n5 2\n4 4\n2 5\n1 2"
    }
  ],
  "angle_sort": [
    {
      "input": "6\n-1 2\n-2 -2\n2 -1\n4 1\n4 3\n2 -3",
      "output": "4 5 1 2 6 3"
    }
  ],
  "angle_sort2": [
    {
      "input": "6\n-1 2\n-2 -2\n2 -1\n4 1\n4 3\n2 -3",
      "output": "6 4 5 3 1 2"
    }
  ],
  "fencing": [
    {
      "input": "4\n4 8\n4 12\n5 9.3\n7 8",
      "output": "12.00"
    }
  ],
  "koi_area": [
    {
      "input": "22\n2 2  8 2  8 3  6 3  6 5\n8 5  8 7  11 7 11 5 13 5\n13 9   8 9  8 10 2 10  2 8\n4 8  4 9  6 9  6 7  3 7\n3 5  2 5",
      "output": "5.00"
    }
  ],
  "ccc_comets": [
    {
      "input": "3\n3\n0 0\n1 0\n0 1\n20 20\n60 20\n40 40\n4\n0 0\n1 1\n0 0\n1 1\n30 30\n19 23\n30 30\n19 23\n4\n0 0\n1 0\n1 1\n0 1\n0 0\n2 0\n2 1\n0 1",
      "output": "3\n1\n0\n※ 이 문제는 번역이 이상한 것도 있지만 원문도 만만치 않게 헷갈리게 쓰여 있습니다. 원문이 보고 싶으신 분은  cemc.uwaterloo.ca/contests/computing/2013/Stage2/day2.pdf에서 Problem 2를 읽어보세요."
    }
  ]
}